// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 71RGmKESGHwX1FQiVTH6Ch
// Component: RvTt0xcBF8rg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Avatar from "../../Avatar"; // plasmic-import: Lfk_eMQEaUtt/component
import Separator from "../../Separator"; // plasmic-import: iWSZkUWMNfpu/component
import Button from "../../Button"; // plasmic-import: 3BnfwULcRUyf/component
import Badge from "../../Badge"; // plasmic-import: pnXQiYjPocAS/component

import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_separator_css from "../separator/plasmic.module.css"; // plasmic-import: mGt6E9beS9xM1LmsApto9L/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_badge_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 71RGmKESGHwX1FQiVTH6Ch/projectcss
import sty from "./PlasmicCourseCard.module.css"; // plasmic-import: RvTt0xcBF8rg/css

import FaHomesvgIcon from "./icons/PlasmicIcon__FaHomesvg"; // plasmic-import: 7rrr4nC2lnac/icon
import FaStarSolidsvgIcon from "./icons/PlasmicIcon__FaStarSolidsvg"; // plasmic-import: OofxvfuVT_eU/icon
import FaChecksvgIcon from "../button/icons/PlasmicIcon__FaChecksvg"; // plasmic-import: L4y0LCanLhk0/icon
import FaArrowRightsvgIcon from "../button/icons/PlasmicIcon__FaArrowRightsvg"; // plasmic-import: vqTI491KdiJ9/icon
import FaAngleRightsvgIcon from "./icons/PlasmicIcon__FaAngleRightsvg"; // plasmic-import: PbEob5XiVdjo/icon

createPlasmicElementProxy;

export type PlasmicCourseCard__VariantMembers = {
  usage:
    | "passwordReset"
    | "level"
    | "courseTopic"
    | "courseEvent"
    | "scheduledCourse"
    | "topicA"
    | "topicB"
    | "course"
    | "header"
    | "purchaseCourse"
    | "instructor"
    | "courseLessons";
  backgroundColor:
    | "subtleBlue"
    | "subtleYellow"
    | "subtlePink"
    | "subtleGray"
    | "clear"
    | "boldBlue"
    | "boldYellow"
    | "boldPink"
    | "boldGray"
    | "subtleSecondary"
    | "subtlePrimary"
    | "subtleStandard"
    | "boldSecondary"
    | "boldPrimary"
    | "boldStandard";
  fontColor:
    | "boldBlue"
    | "boldYellow"
    | "boldPink"
    | "boldGray"
    | "white"
    | "subtleBlue"
    | "subtleYellow"
    | "subtlePink"
    | "subtleGray";
  backgroundChanges: "lighten" | "darken";
  backgroundPattern: "unnamedVariant" | "unnamedVariant2";
  reverseItem: "reverseItem";
  changeCardOrientation: "changeCardOrientation";
};
export type PlasmicCourseCard__VariantsArgs = {
  usage?: SingleChoiceArg<
    | "passwordReset"
    | "level"
    | "courseTopic"
    | "courseEvent"
    | "scheduledCourse"
    | "topicA"
    | "topicB"
    | "course"
    | "header"
    | "purchaseCourse"
    | "instructor"
    | "courseLessons"
  >;
  backgroundColor?: SingleChoiceArg<
    | "subtleBlue"
    | "subtleYellow"
    | "subtlePink"
    | "subtleGray"
    | "clear"
    | "boldBlue"
    | "boldYellow"
    | "boldPink"
    | "boldGray"
    | "subtleSecondary"
    | "subtlePrimary"
    | "subtleStandard"
    | "boldSecondary"
    | "boldPrimary"
    | "boldStandard"
  >;
  fontColor?: SingleChoiceArg<
    | "boldBlue"
    | "boldYellow"
    | "boldPink"
    | "boldGray"
    | "white"
    | "subtleBlue"
    | "subtleYellow"
    | "subtlePink"
    | "subtleGray"
  >;
  backgroundChanges?: SingleChoiceArg<"lighten" | "darken">;
  backgroundPattern?: MultiChoiceArg<"unnamedVariant" | "unnamedVariant2">;
  reverseItem?: SingleBooleanChoiceArg<"reverseItem">;
  changeCardOrientation?: SingleBooleanChoiceArg<"changeCardOrientation">;
};
type VariantPropType = keyof PlasmicCourseCard__VariantsArgs;
export const PlasmicCourseCard__VariantProps = new Array<VariantPropType>(
  "usage",
  "backgroundColor",
  "fontColor",
  "backgroundChanges",
  "backgroundPattern",
  "reverseItem",
  "changeCardOrientation"
);

export type PlasmicCourseCard__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  children2?: React.ReactNode;
  slot4?: React.ReactNode;
  children3?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot11?: React.ReactNode;
  slot12?: React.ReactNode;
  joinButton2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCourseCard__ArgsType;
export const PlasmicCourseCard__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "children2",
  "slot4",
  "children3",
  "slot5",
  "slot6",
  "slot7",
  "slot8",
  "slot9",
  "slot10",
  "slot11",
  "slot12",
  "joinButton2"
);

export type PlasmicCourseCard__OverridesType = {
  card?: Flex__<"div">;
  center?: Flex__<"div">;
  item?: Flex__<"div">;
  itemMedia?: Flex__<"div">;
  itemIconSlot?: Flex__<"div">;
  itemAvatarSlot?: Flex__<"div">;
  itemImageSlot?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  body?: Flex__<"div">;
  headers?: Flex__<"div">;
  details?: Flex__<"div">;
  leftSideItems?: Flex__<"div">;
  rightSideItems?: Flex__<"div">;
  headlines?: Flex__<"div">;
  headline?: Flex__<"div">;
  rightSideItems2?: Flex__<"div">;
  subHeadlines?: Flex__<"div">;
  subHeadline?: Flex__<"div">;
  subHeadline2?: Flex__<"div">;
  content?: Flex__<"div">;
  mid?: Flex__<"div">;
  avatars?: Flex__<"div">;
  headline3?: Flex__<"div">;
  time?: Flex__<"div">;
  footer?: Flex__<"div">;
  headline2?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  action?: Flex__<"div">;
  navigation?: Flex__<"div">;
  rightCarrotButton?: Flex__<typeof Button>;
  cardMedia?: Flex__<"div">;
  cardIconSlot?: Flex__<"div">;
  cardImageSlot?: Flex__<"div">;
};

export interface DefaultCourseCardProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  children2?: React.ReactNode;
  slot4?: React.ReactNode;
  children3?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot11?: React.ReactNode;
  slot12?: React.ReactNode;
  joinButton2?: React.ReactNode;
  usage?: SingleChoiceArg<
    | "passwordReset"
    | "level"
    | "courseTopic"
    | "courseEvent"
    | "scheduledCourse"
    | "topicA"
    | "topicB"
    | "course"
    | "header"
    | "purchaseCourse"
    | "instructor"
    | "courseLessons"
  >;
  backgroundColor?: SingleChoiceArg<
    | "subtleBlue"
    | "subtleYellow"
    | "subtlePink"
    | "subtleGray"
    | "clear"
    | "boldBlue"
    | "boldYellow"
    | "boldPink"
    | "boldGray"
    | "subtleSecondary"
    | "subtlePrimary"
    | "subtleStandard"
    | "boldSecondary"
    | "boldPrimary"
    | "boldStandard"
  >;
  fontColor?: SingleChoiceArg<
    | "boldBlue"
    | "boldYellow"
    | "boldPink"
    | "boldGray"
    | "white"
    | "subtleBlue"
    | "subtleYellow"
    | "subtlePink"
    | "subtleGray"
  >;
  backgroundChanges?: SingleChoiceArg<"lighten" | "darken">;
  backgroundPattern?: MultiChoiceArg<"unnamedVariant" | "unnamedVariant2">;
  reverseItem?: SingleBooleanChoiceArg<"reverseItem">;
  changeCardOrientation?: SingleBooleanChoiceArg<"changeCardOrientation">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCourseCard__RenderFunc(props: {
  variants: PlasmicCourseCard__VariantsArgs;
  args: PlasmicCourseCard__ArgsType;
  overrides: PlasmicCourseCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "usage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.usage
      },
      {
        path: "backgroundColor",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.backgroundColor
      },
      {
        path: "fontColor",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fontColor
      },
      {
        path: "backgroundChanges",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.backgroundChanges
      },
      {
        path: "backgroundPattern",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.backgroundPattern
      },
      {
        path: "reverseItem",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.reverseItem
      },
      {
        path: "changeCardOrientation",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.changeCardOrientation
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"card"}
      data-plasmic-override={overrides.card}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_separator_css.plasmic_tokens,
        plasmic_image_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        plasmic_avatar_css.plasmic_tokens,
        plasmic_badge_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        sty.card,
        {
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [sty.cardbackgroundChanges_darken]: hasVariant(
            $state,
            "backgroundChanges",
            "darken"
          ),
          [sty.cardbackgroundChanges_lighten]: hasVariant(
            $state,
            "backgroundChanges",
            "lighten"
          ),
          [sty.cardbackgroundChanges_lighten_backgroundColor_boldBlue]:
            hasVariant($state, "backgroundChanges", "lighten") &&
            hasVariant($state, "backgroundColor", "boldBlue"),
          [sty.cardbackgroundColor_boldBlue]: hasVariant(
            $state,
            "backgroundColor",
            "boldBlue"
          ),
          [sty.cardbackgroundColor_boldBlue_backgroundChanges_darken]:
            hasVariant($state, "backgroundColor", "boldBlue") &&
            hasVariant($state, "backgroundChanges", "darken"),
          [sty.cardbackgroundColor_boldGray]: hasVariant(
            $state,
            "backgroundColor",
            "boldGray"
          ),
          [sty.cardbackgroundColor_boldPink]: hasVariant(
            $state,
            "backgroundColor",
            "boldPink"
          ),
          [sty.cardbackgroundColor_boldPrimary]: hasVariant(
            $state,
            "backgroundColor",
            "boldPrimary"
          ),
          [sty.cardbackgroundColor_boldSecondary]: hasVariant(
            $state,
            "backgroundColor",
            "boldSecondary"
          ),
          [sty.cardbackgroundColor_boldStandard]: hasVariant(
            $state,
            "backgroundColor",
            "boldStandard"
          ),
          [sty.cardbackgroundColor_boldYellow]: hasVariant(
            $state,
            "backgroundColor",
            "boldYellow"
          ),
          [sty.cardbackgroundColor_clear]: hasVariant(
            $state,
            "backgroundColor",
            "clear"
          ),
          [sty.cardbackgroundColor_subtleBlue]: hasVariant(
            $state,
            "backgroundColor",
            "subtleBlue"
          ),
          [sty.cardbackgroundColor_subtleBlue_usage_level]:
            hasVariant($state, "usage", "level") &&
            hasVariant($state, "backgroundColor", "subtleBlue"),
          [sty.cardbackgroundColor_subtleGray]: hasVariant(
            $state,
            "backgroundColor",
            "subtleGray"
          ),
          [sty.cardbackgroundColor_subtlePink]: hasVariant(
            $state,
            "backgroundColor",
            "subtlePink"
          ),
          [sty.cardbackgroundColor_subtlePrimary]: hasVariant(
            $state,
            "backgroundColor",
            "subtlePrimary"
          ),
          [sty.cardbackgroundColor_subtleSecondary]: hasVariant(
            $state,
            "backgroundColor",
            "subtleSecondary"
          ),
          [sty.cardbackgroundColor_subtleStandard]: hasVariant(
            $state,
            "backgroundColor",
            "subtleStandard"
          ),
          [sty.cardbackgroundColor_subtleYellow]: hasVariant(
            $state,
            "backgroundColor",
            "subtleYellow"
          ),
          [sty.cardbackgroundPattern_unnamedVariant]: hasVariant(
            $state,
            "backgroundPattern",
            "unnamedVariant"
          ),
          [sty.cardfontColor_boldBlue]: hasVariant(
            $state,
            "fontColor",
            "boldBlue"
          ),
          [sty.cardfontColor_subtleBlue]: hasVariant(
            $state,
            "fontColor",
            "subtleBlue"
          ),
          [sty.cardfontColor_subtleGray]: hasVariant(
            $state,
            "fontColor",
            "subtleGray"
          ),
          [sty.cardusage_courseEvent]: hasVariant(
            $state,
            "usage",
            "courseEvent"
          ),
          [sty.cardusage_courseLessons]: hasVariant(
            $state,
            "usage",
            "courseLessons"
          ),
          [sty.cardusage_courseTopic]: hasVariant(
            $state,
            "usage",
            "courseTopic"
          ),
          [sty.cardusage_course]: hasVariant($state, "usage", "course"),
          [sty.cardusage_header]: hasVariant($state, "usage", "header"),
          [sty.cardusage_level]: hasVariant($state, "usage", "level"),
          [sty.cardusage_passwordReset]: hasVariant(
            $state,
            "usage",
            "passwordReset"
          ),
          [sty.cardusage_purchaseCourse]: hasVariant(
            $state,
            "usage",
            "purchaseCourse"
          ),
          [sty.cardusage_scheduledCourse]: hasVariant(
            $state,
            "usage",
            "scheduledCourse"
          ),
          [sty.cardusage_topicA]: hasVariant($state, "usage", "topicA"),
          [sty.cardusage_topicB]: hasVariant($state, "usage", "topicB")
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"center"}
        data-plasmic-override={overrides.center}
        hasGap={true}
        className={classNames(projectcss.all, sty.center, {
          [sty.centerusage_courseTopic]: hasVariant(
            $state,
            "usage",
            "courseTopic"
          ),
          [sty.centerusage_course]: hasVariant($state, "usage", "course"),
          [sty.centerusage_header]: hasVariant($state, "usage", "header")
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"item"}
          data-plasmic-override={overrides.item}
          hasGap={true}
          className={classNames(projectcss.all, sty.item, {
            [sty.itemreverseItem]: hasVariant(
              $state,
              "reverseItem",
              "reverseItem"
            ),
            [sty.itemusage_courseLessons]: hasVariant(
              $state,
              "usage",
              "courseLessons"
            ),
            [sty.itemusage_courseTopic]: hasVariant(
              $state,
              "usage",
              "courseTopic"
            ),
            [sty.itemusage_course]: hasVariant($state, "usage", "course"),
            [sty.itemusage_header]: hasVariant($state, "usage", "header"),
            [sty.itemusage_level]: hasVariant($state, "usage", "level"),
            [sty.itemusage_passwordReset]: hasVariant(
              $state,
              "usage",
              "passwordReset"
            ),
            [sty.itemusage_purchaseCourse]: hasVariant(
              $state,
              "usage",
              "purchaseCourse"
            ),
            [sty.itemusage_scheduledCourse]: hasVariant(
              $state,
              "usage",
              "scheduledCourse"
            ),
            [sty.itemusage_topicB]: hasVariant($state, "usage", "topicB")
          })}
        >
          <div
            data-plasmic-name={"itemMedia"}
            data-plasmic-override={overrides.itemMedia}
            className={classNames(projectcss.all, sty.itemMedia, {
              [sty.itemMediareverseItem]: hasVariant(
                $state,
                "reverseItem",
                "reverseItem"
              ),
              [sty.itemMediausage_courseEvent]: hasVariant(
                $state,
                "usage",
                "courseEvent"
              ),
              [sty.itemMediausage_courseTopic]: hasVariant(
                $state,
                "usage",
                "courseTopic"
              ),
              [sty.itemMediausage_course]: hasVariant(
                $state,
                "usage",
                "course"
              ),
              [sty.itemMediausage_header]: hasVariant(
                $state,
                "usage",
                "header"
              ),
              [sty.itemMediausage_instructor]: hasVariant(
                $state,
                "usage",
                "instructor"
              ),
              [sty.itemMediausage_level]: hasVariant($state, "usage", "level"),
              [sty.itemMediausage_purchaseCourse]: hasVariant(
                $state,
                "usage",
                "purchaseCourse"
              ),
              [sty.itemMediausage_scheduledCourse]: hasVariant(
                $state,
                "usage",
                "scheduledCourse"
              ),
              [sty.itemMediausage_topicB]: hasVariant($state, "usage", "topicB")
            })}
          >
            <div
              data-plasmic-name={"itemIconSlot"}
              data-plasmic-override={overrides.itemIconSlot}
              className={classNames(projectcss.all, sty.itemIconSlot, {
                [sty.itemIconSlotusage_courseLessons]: hasVariant(
                  $state,
                  "usage",
                  "courseLessons"
                ),
                [sty.itemIconSlotusage_courseTopic]: hasVariant(
                  $state,
                  "usage",
                  "courseTopic"
                ),
                [sty.itemIconSlotusage_course]: hasVariant(
                  $state,
                  "usage",
                  "course"
                ),
                [sty.itemIconSlotusage_header]: hasVariant(
                  $state,
                  "usage",
                  "header"
                ),
                [sty.itemIconSlotusage_instructor]: hasVariant(
                  $state,
                  "usage",
                  "instructor"
                ),
                [sty.itemIconSlotusage_level]: hasVariant(
                  $state,
                  "usage",
                  "level"
                ),
                [sty.itemIconSlotusage_purchaseCourse]: hasVariant(
                  $state,
                  "usage",
                  "purchaseCourse"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <FaHomesvgIcon
                    className={classNames(projectcss.all, sty.svg__fwPlA)}
                    role={"img"}
                  />
                ),

                value: args.slot2
              })}
            </div>
            {(
              hasVariant($state, "usage", "instructor")
                ? true
                : hasVariant($state, "usage", "course")
                ? true
                : false
            ) ? (
              <div
                data-plasmic-name={"itemAvatarSlot"}
                data-plasmic-override={overrides.itemAvatarSlot}
                className={classNames(projectcss.all, sty.itemAvatarSlot, {
                  [sty.itemAvatarSlotusage_courseTopic]: hasVariant(
                    $state,
                    "usage",
                    "courseTopic"
                  ),
                  [sty.itemAvatarSlotusage_course]: hasVariant(
                    $state,
                    "usage",
                    "course"
                  ),
                  [sty.itemAvatarSlotusage_header]: hasVariant(
                    $state,
                    "usage",
                    "header"
                  ),
                  [sty.itemAvatarSlotusage_instructor]: hasVariant(
                    $state,
                    "usage",
                    "instructor"
                  ),
                  [sty.itemAvatarSlotusage_level]: hasVariant(
                    $state,
                    "usage",
                    "level"
                  ),
                  [sty.itemAvatarSlotusage_purchaseCourse]: hasVariant(
                    $state,
                    "usage",
                    "purchaseCourse"
                  )
                })}
              >
                {renderPlasmicSlot({
                  defaultContents: (
                    <Avatar
                      avatarIconSlot={
                        <svg
                          className={classNames(projectcss.all, sty.svg__uxzLo)}
                          role={"img"}
                        />
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.avatar__dqBnf
                      )}
                    />
                  ),

                  value: args.slot9
                })}
              </div>
            ) : null}
            {(
              hasVariant($state, "usage", "courseLessons")
                ? true
                : hasVariant($state, "usage", "course")
                ? true
                : false
            ) ? (
              <div
                data-plasmic-name={"itemImageSlot"}
                data-plasmic-override={overrides.itemImageSlot}
                className={classNames(projectcss.all, sty.itemImageSlot, {
                  [sty.itemImageSlotusage_courseLessons]: hasVariant(
                    $state,
                    "usage",
                    "courseLessons"
                  ),
                  [sty.itemImageSlotusage_courseTopic]: hasVariant(
                    $state,
                    "usage",
                    "courseTopic"
                  ),
                  [sty.itemImageSlotusage_course]: hasVariant(
                    $state,
                    "usage",
                    "course"
                  ),
                  [sty.itemImageSlotusage_header]: hasVariant(
                    $state,
                    "usage",
                    "header"
                  ),
                  [sty.itemImageSlotusage_level]: hasVariant(
                    $state,
                    "usage",
                    "level"
                  )
                })}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img, {
                    [sty.imgusage_course]: hasVariant(
                      $state,
                      "usage",
                      "course"
                    ),
                    [sty.imgusage_header]: hasVariant($state, "usage", "header")
                  })}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              </div>
            ) : null}
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            hasGap={true}
            className={classNames(projectcss.all, sty.body, {
              [sty.bodyusage_courseLessons]: hasVariant(
                $state,
                "usage",
                "courseLessons"
              ),
              [sty.bodyusage_courseTopic]: hasVariant(
                $state,
                "usage",
                "courseTopic"
              ),
              [sty.bodyusage_course]: hasVariant($state, "usage", "course"),
              [sty.bodyusage_level]: hasVariant($state, "usage", "level"),
              [sty.bodyusage_purchaseCourse]: hasVariant(
                $state,
                "usage",
                "purchaseCourse"
              ),
              [sty.bodyusage_scheduledCourse]: hasVariant(
                $state,
                "usage",
                "scheduledCourse"
              ),
              [sty.bodyusage_topicA]: hasVariant($state, "usage", "topicA"),
              [sty.bodyusage_topicB]: hasVariant($state, "usage", "topicB")
            })}
          >
            <Separator
              className={classNames("__wab_instance", sty.separator__pwPjD, {
                [sty.separatorusage_course__pwPjDcUpAv]: hasVariant(
                  $state,
                  "usage",
                  "course"
                )
              })}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"headers"}
              data-plasmic-override={overrides.headers}
              hasGap={true}
              className={classNames(projectcss.all, sty.headers, {
                [sty.headersusage_courseTopic]: hasVariant(
                  $state,
                  "usage",
                  "courseTopic"
                ),
                [sty.headersusage_course]: hasVariant(
                  $state,
                  "usage",
                  "course"
                ),
                [sty.headersusage_instructor]: hasVariant(
                  $state,
                  "usage",
                  "instructor"
                ),
                [sty.headersusage_level]: hasVariant($state, "usage", "level"),
                [sty.headersusage_purchaseCourse]: hasVariant(
                  $state,
                  "usage",
                  "purchaseCourse"
                ),
                [sty.headersusage_scheduledCourse]: hasVariant(
                  $state,
                  "usage",
                  "scheduledCourse"
                ),
                [sty.headersusage_topicB]: hasVariant($state, "usage", "topicB")
              })}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"details"}
                data-plasmic-override={overrides.details}
                hasGap={true}
                className={classNames(projectcss.all, sty.details, {
                  [sty.detailsusage_course]: hasVariant(
                    $state,
                    "usage",
                    "course"
                  ),
                  [sty.detailsusage_instructor]: hasVariant(
                    $state,
                    "usage",
                    "instructor"
                  ),
                  [sty.detailsusage_purchaseCourse]: hasVariant(
                    $state,
                    "usage",
                    "purchaseCourse"
                  )
                })}
              >
                <div
                  data-plasmic-name={"leftSideItems"}
                  data-plasmic-override={overrides.leftSideItems}
                  className={classNames(projectcss.all, sty.leftSideItems, {
                    [sty.leftSideItemsusage_course]: hasVariant(
                      $state,
                      "usage",
                      "course"
                    ),
                    [sty.leftSideItemsusage_instructor]: hasVariant(
                      $state,
                      "usage",
                      "instructor"
                    ),
                    [sty.leftSideItemsusage_purchaseCourse]: hasVariant(
                      $state,
                      "usage",
                      "purchaseCourse"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jCl7C, {
                      [sty.freeBoxusage_course__jCl7CcUpAv]: hasVariant(
                        $state,
                        "usage",
                        "course"
                      )
                    })}
                  >
                    {renderPlasmicSlot({
                      defaultContents: "$150",
                      value: args.slot6
                    })}
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"rightSideItems"}
                  data-plasmic-override={overrides.rightSideItems}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.rightSideItems, {
                    [sty.rightSideItemsusage_course]: hasVariant(
                      $state,
                      "usage",
                      "course"
                    ),
                    [sty.rightSideItemsusage_header]: hasVariant(
                      $state,
                      "usage",
                      "header"
                    ),
                    [sty.rightSideItemsusage_instructor]: hasVariant(
                      $state,
                      "usage",
                      "instructor"
                    ),
                    [sty.rightSideItemsusage_purchaseCourse]: hasVariant(
                      $state,
                      "usage",
                      "purchaseCourse"
                    )
                  })}
                >
                  <FaStarSolidsvgIcon
                    className={classNames(projectcss.all, sty.svg__yiMXb, {
                      [sty.svgusage_course__yiMXbcUpAv]: hasVariant(
                        $state,
                        "usage",
                        "course"
                      )
                    })}
                    role={"img"}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__aL8Ro, {
                      [sty.freeBoxusage_course__aL8RocUpAv]: hasVariant(
                        $state,
                        "usage",
                        "course"
                      ),
                      [sty.freeBoxusage_instructor__aL8RoBjHsp]: hasVariant(
                        $state,
                        "usage",
                        "instructor"
                      )
                    })}
                  >
                    {renderPlasmicSlot({
                      defaultContents: (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0QfLx
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__bK62P
                                )}
                              >
                                {"5.0"}
                              </span>
                            }
                            <React.Fragment>{" ( "}</React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__mbWqc
                                )}
                              >
                                {"X"}
                              </span>
                            }
                            <React.Fragment>{" )"}</React.Fragment>
                          </React.Fragment>
                        </div>
                      ),
                      value: args.slot7,
                      className: classNames(sty.slotTargetSlot7, {
                        [sty.slotTargetSlot7usage_course]: hasVariant(
                          $state,
                          "usage",
                          "course"
                        )
                      })
                    })}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"headlines"}
                data-plasmic-override={overrides.headlines}
                hasGap={true}
                className={classNames(projectcss.all, sty.headlines, {
                  [sty.headlinesusage_courseTopic]: hasVariant(
                    $state,
                    "usage",
                    "courseTopic"
                  ),
                  [sty.headlinesusage_course]: hasVariant(
                    $state,
                    "usage",
                    "course"
                  ),
                  [sty.headlinesusage_instructor]: hasVariant(
                    $state,
                    "usage",
                    "instructor"
                  )
                })}
              >
                <div
                  data-plasmic-name={"headline"}
                  data-plasmic-override={overrides.headline}
                  className={classNames(projectcss.all, sty.headline, {
                    [sty.headlineusage_courseTopic]: hasVariant(
                      $state,
                      "usage",
                      "courseTopic"
                    ),
                    [sty.headlineusage_header]: hasVariant(
                      $state,
                      "usage",
                      "header"
                    ),
                    [sty.headlineusage_instructor]: hasVariant(
                      $state,
                      "usage",
                      "instructor"
                    ),
                    [sty.headlineusage_level]: hasVariant(
                      $state,
                      "usage",
                      "level"
                    ),
                    [sty.headlineusage_topicA]: hasVariant(
                      $state,
                      "usage",
                      "topicA"
                    ),
                    [sty.headlineusage_topicB]: hasVariant(
                      $state,
                      "usage",
                      "topicB"
                    )
                  })}
                >
                  {renderPlasmicSlot({
                    defaultContents: "Headline",
                    value: args.children,
                    className: classNames(sty.slotTargetChildren, {
                      [sty.slotTargetChildrenfontColor_boldBlue]: hasVariant(
                        $state,
                        "fontColor",
                        "boldBlue"
                      ),
                      [sty.slotTargetChildrenfontColor_boldGray]: hasVariant(
                        $state,
                        "fontColor",
                        "boldGray"
                      ),
                      [sty.slotTargetChildrenfontColor_boldPink]: hasVariant(
                        $state,
                        "fontColor",
                        "boldPink"
                      ),
                      [sty.slotTargetChildrenfontColor_boldYellow]: hasVariant(
                        $state,
                        "fontColor",
                        "boldYellow"
                      ),
                      [sty.slotTargetChildrenfontColor_subtleBlue]: hasVariant(
                        $state,
                        "fontColor",
                        "subtleBlue"
                      ),
                      [sty.slotTargetChildrenfontColor_subtleGray]: hasVariant(
                        $state,
                        "fontColor",
                        "subtleGray"
                      ),
                      [sty.slotTargetChildrenfontColor_subtlePink]: hasVariant(
                        $state,
                        "fontColor",
                        "subtlePink"
                      ),
                      [sty.slotTargetChildrenfontColor_subtleYellow]:
                        hasVariant($state, "fontColor", "subtleYellow"),
                      [sty.slotTargetChildrenfontColor_white]: hasVariant(
                        $state,
                        "fontColor",
                        "white"
                      ),
                      [sty.slotTargetChildrenusage_courseEvent]: hasVariant(
                        $state,
                        "usage",
                        "courseEvent"
                      ),
                      [sty.slotTargetChildrenusage_courseTopic]: hasVariant(
                        $state,
                        "usage",
                        "courseTopic"
                      ),
                      [sty.slotTargetChildrenusage_instructor]: hasVariant(
                        $state,
                        "usage",
                        "instructor"
                      ),
                      [sty.slotTargetChildrenusage_level]: hasVariant(
                        $state,
                        "usage",
                        "level"
                      )
                    })
                  })}
                  {(
                    hasVariant($state, "usage", "instructor")
                      ? true
                      : hasVariant($state, "usage", "course")
                      ? true
                      : false
                  ) ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"rightSideItems2"}
                      data-plasmic-override={overrides.rightSideItems2}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.rightSideItems2,
                        {
                          [sty.rightSideItems2usage_course]: hasVariant(
                            $state,
                            "usage",
                            "course"
                          ),
                          [sty.rightSideItems2usage_header]: hasVariant(
                            $state,
                            "usage",
                            "header"
                          ),
                          [sty.rightSideItems2usage_instructor]: hasVariant(
                            $state,
                            "usage",
                            "instructor"
                          ),
                          [sty.rightSideItems2usage_purchaseCourse]: hasVariant(
                            $state,
                            "usage",
                            "purchaseCourse"
                          )
                        }
                      )}
                    >
                      <FaStarSolidsvgIcon
                        className={classNames(projectcss.all, sty.svg__yHJk, {
                          [sty.svgusage_course__yHJkCUpAv]: hasVariant(
                            $state,
                            "usage",
                            "course"
                          )
                        })}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yBrBx,
                          {
                            [sty.freeBoxusage_course__yBrBxcUpAv]: hasVariant(
                              $state,
                              "usage",
                              "course"
                            ),
                            [sty.freeBoxusage_instructor__yBrBxBjHsp]:
                              hasVariant($state, "usage", "instructor")
                          }
                        )}
                      >
                        {renderPlasmicSlot({
                          defaultContents: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__w1TrY
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>{""}</React.Fragment>
                                {
                                  <span
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.span,
                                      projectcss.__wab_text,
                                      projectcss.plasmic_default__inline,
                                      sty.span___7F6Rt
                                    )}
                                  >
                                    {"5.0"}
                                  </span>
                                }
                                <React.Fragment>{" ( "}</React.Fragment>
                                {
                                  <span
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.span,
                                      projectcss.__wab_text,
                                      projectcss.plasmic_default__inline,
                                      sty.span__ozZbt
                                    )}
                                  >
                                    {"X"}
                                  </span>
                                }
                                <React.Fragment>{" )"}</React.Fragment>
                              </React.Fragment>
                            </div>
                          ),
                          value: args.slot11,
                          className: classNames(sty.slotTargetSlot11, {
                            [sty.slotTargetSlot11usage_course]: hasVariant(
                              $state,
                              "usage",
                              "course"
                            )
                          })
                        })}
                      </div>
                    </Stack__>
                  ) : null}
                </div>
                <div
                  data-plasmic-name={"subHeadlines"}
                  data-plasmic-override={overrides.subHeadlines}
                  className={classNames(projectcss.all, sty.subHeadlines, {
                    [sty.subHeadlinesusage_instructor]: hasVariant(
                      $state,
                      "usage",
                      "instructor"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"subHeadline"}
                    data-plasmic-override={overrides.subHeadline}
                    className={classNames(projectcss.all, sty.subHeadline, {
                      [sty.subHeadlineusage_courseTopic]: hasVariant(
                        $state,
                        "usage",
                        "courseTopic"
                      ),
                      [sty.subHeadlineusage_course]: hasVariant(
                        $state,
                        "usage",
                        "course"
                      ),
                      [sty.subHeadlineusage_header]: hasVariant(
                        $state,
                        "usage",
                        "header"
                      ),
                      [sty.subHeadlineusage_instructor]: hasVariant(
                        $state,
                        "usage",
                        "instructor"
                      ),
                      [sty.subHeadlineusage_level]: hasVariant(
                        $state,
                        "usage",
                        "level"
                      ),
                      [sty.subHeadlineusage_topicA]: hasVariant(
                        $state,
                        "usage",
                        "topicA"
                      ),
                      [sty.subHeadlineusage_topicB]: hasVariant(
                        $state,
                        "usage",
                        "topicB"
                      )
                    })}
                  >
                    {renderPlasmicSlot({
                      defaultContents: "ABC",
                      value: args.slot,
                      className: classNames(sty.slotTargetSlot, {
                        [sty.slotTargetSlotfontColor_boldBlue]: hasVariant(
                          $state,
                          "fontColor",
                          "boldBlue"
                        ),
                        [sty.slotTargetSlotfontColor_boldGray]: hasVariant(
                          $state,
                          "fontColor",
                          "boldGray"
                        ),
                        [sty.slotTargetSlotfontColor_boldPink]: hasVariant(
                          $state,
                          "fontColor",
                          "boldPink"
                        ),
                        [sty.slotTargetSlotfontColor_boldYellow]: hasVariant(
                          $state,
                          "fontColor",
                          "boldYellow"
                        ),
                        [sty.slotTargetSlotfontColor_subtleBlue]: hasVariant(
                          $state,
                          "fontColor",
                          "subtleBlue"
                        ),
                        [sty.slotTargetSlotfontColor_subtleGray]: hasVariant(
                          $state,
                          "fontColor",
                          "subtleGray"
                        ),
                        [sty.slotTargetSlotfontColor_subtlePink]: hasVariant(
                          $state,
                          "fontColor",
                          "subtlePink"
                        ),
                        [sty.slotTargetSlotfontColor_subtleYellow]: hasVariant(
                          $state,
                          "fontColor",
                          "subtleYellow"
                        ),
                        [sty.slotTargetSlotfontColor_white]: hasVariant(
                          $state,
                          "fontColor",
                          "white"
                        ),
                        [sty.slotTargetSlotusage_instructor]: hasVariant(
                          $state,
                          "usage",
                          "instructor"
                        )
                      })
                    })}
                  </div>
                  {(
                    hasVariant($state, "usage", "instructor")
                      ? true
                      : hasVariant($state, "usage", "header")
                      ? true
                      : hasVariant($state, "usage", "course")
                      ? true
                      : hasVariant($state, "usage", "topicB")
                      ? true
                      : hasVariant($state, "usage", "topicA")
                      ? true
                      : hasVariant($state, "usage", "courseTopic")
                      ? true
                      : hasVariant($state, "usage", "level")
                      ? true
                      : false
                  ) ? (
                    <div
                      data-plasmic-name={"subHeadline2"}
                      data-plasmic-override={overrides.subHeadline2}
                      className={classNames(projectcss.all, sty.subHeadline2, {
                        [sty.subHeadline2usage_courseTopic]: hasVariant(
                          $state,
                          "usage",
                          "courseTopic"
                        ),
                        [sty.subHeadline2usage_course]: hasVariant(
                          $state,
                          "usage",
                          "course"
                        ),
                        [sty.subHeadline2usage_header]: hasVariant(
                          $state,
                          "usage",
                          "header"
                        ),
                        [sty.subHeadline2usage_instructor]: hasVariant(
                          $state,
                          "usage",
                          "instructor"
                        ),
                        [sty.subHeadline2usage_level]: hasVariant(
                          $state,
                          "usage",
                          "level"
                        ),
                        [sty.subHeadline2usage_topicA]: hasVariant(
                          $state,
                          "usage",
                          "topicA"
                        ),
                        [sty.subHeadline2usage_topicB]: hasVariant(
                          $state,
                          "usage",
                          "topicB"
                        )
                      })}
                    >
                      {renderPlasmicSlot({
                        defaultContents: "ABC",
                        value: args.slot10,
                        className: classNames(sty.slotTargetSlot10, {
                          [sty.slotTargetSlot10fontColor_boldBlue]: hasVariant(
                            $state,
                            "fontColor",
                            "boldBlue"
                          ),
                          [sty.slotTargetSlot10fontColor_boldGray]: hasVariant(
                            $state,
                            "fontColor",
                            "boldGray"
                          ),
                          [sty.slotTargetSlot10fontColor_boldPink]: hasVariant(
                            $state,
                            "fontColor",
                            "boldPink"
                          ),
                          [sty.slotTargetSlot10fontColor_boldYellow]:
                            hasVariant($state, "fontColor", "boldYellow"),
                          [sty.slotTargetSlot10fontColor_subtleBlue]:
                            hasVariant($state, "fontColor", "subtleBlue"),
                          [sty.slotTargetSlot10fontColor_subtleGray]:
                            hasVariant($state, "fontColor", "subtleGray"),
                          [sty.slotTargetSlot10fontColor_subtlePink]:
                            hasVariant($state, "fontColor", "subtlePink"),
                          [sty.slotTargetSlot10fontColor_subtleYellow]:
                            hasVariant($state, "fontColor", "subtleYellow"),
                          [sty.slotTargetSlot10fontColor_white]: hasVariant(
                            $state,
                            "fontColor",
                            "white"
                          ),
                          [sty.slotTargetSlot10usage_instructor]: hasVariant(
                            $state,
                            "usage",
                            "instructor"
                          )
                        })
                      })}
                    </div>
                  ) : null}
                </div>
              </Stack__>
              <div
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                className={classNames(projectcss.all, sty.content, {
                  [sty.contentfontColor_subtleYellow]: hasVariant(
                    $state,
                    "fontColor",
                    "subtleYellow"
                  ),
                  [sty.contentfontColor_white]: hasVariant(
                    $state,
                    "fontColor",
                    "white"
                  ),
                  [sty.contentusage_courseEvent]: hasVariant(
                    $state,
                    "usage",
                    "courseEvent"
                  ),
                  [sty.contentusage_course]: hasVariant(
                    $state,
                    "usage",
                    "course"
                  ),
                  [sty.contentusage_header]: hasVariant(
                    $state,
                    "usage",
                    "header"
                  ),
                  [sty.contentusage_instructor]: hasVariant(
                    $state,
                    "usage",
                    "instructor"
                  ),
                  [sty.contentusage_level]: hasVariant(
                    $state,
                    "usage",
                    "level"
                  ),
                  [sty.contentusage_passwordReset]: hasVariant(
                    $state,
                    "usage",
                    "passwordReset"
                  ),
                  [sty.contentusage_topicA]: hasVariant(
                    $state,
                    "usage",
                    "topicA"
                  ),
                  [sty.contentusage_topicB]: hasVariant(
                    $state,
                    "usage",
                    "topicB"
                  )
                })}
              >
                {renderPlasmicSlot({
                  defaultContents: "Content",
                  value: args.slot3,
                  className: classNames(sty.slotTargetSlot3, {
                    [sty.slotTargetSlot3fontColor_boldBlue]: hasVariant(
                      $state,
                      "fontColor",
                      "boldBlue"
                    ),
                    [sty.slotTargetSlot3fontColor_boldGray]: hasVariant(
                      $state,
                      "fontColor",
                      "boldGray"
                    ),
                    [sty.slotTargetSlot3fontColor_boldPink]: hasVariant(
                      $state,
                      "fontColor",
                      "boldPink"
                    ),
                    [sty.slotTargetSlot3fontColor_boldYellow]: hasVariant(
                      $state,
                      "fontColor",
                      "boldYellow"
                    ),
                    [sty.slotTargetSlot3fontColor_subtleBlue]: hasVariant(
                      $state,
                      "fontColor",
                      "subtleBlue"
                    ),
                    [sty.slotTargetSlot3fontColor_subtleGray]: hasVariant(
                      $state,
                      "fontColor",
                      "subtleGray"
                    ),
                    [sty.slotTargetSlot3fontColor_subtlePink]: hasVariant(
                      $state,
                      "fontColor",
                      "subtlePink"
                    ),
                    [sty.slotTargetSlot3fontColor_subtleYellow]: hasVariant(
                      $state,
                      "fontColor",
                      "subtleYellow"
                    ),
                    [sty.slotTargetSlot3fontColor_white]: hasVariant(
                      $state,
                      "fontColor",
                      "white"
                    ),
                    [sty.slotTargetSlot3usage_courseTopic]: hasVariant(
                      $state,
                      "usage",
                      "courseTopic"
                    )
                  })
                })}
              </div>
            </Stack__>
            <Separator
              className={classNames("__wab_instance", sty.separator__t5T)}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"mid"}
              data-plasmic-override={overrides.mid}
              hasGap={true}
              className={classNames(projectcss.all, sty.mid, {
                [sty.midusage_courseEvent]: hasVariant(
                  $state,
                  "usage",
                  "courseEvent"
                ),
                [sty.midusage_instructor]: hasVariant(
                  $state,
                  "usage",
                  "instructor"
                ),
                [sty.midusage_scheduledCourse]: hasVariant(
                  $state,
                  "usage",
                  "scheduledCourse"
                )
              })}
            >
              <div
                data-plasmic-name={"avatars"}
                data-plasmic-override={overrides.avatars}
                className={classNames(projectcss.all, sty.avatars, {
                  [sty.avatarsusage_courseEvent]: hasVariant(
                    $state,
                    "usage",
                    "courseEvent"
                  ),
                  [sty.avatarsusage_scheduledCourse]: hasVariant(
                    $state,
                    "usage",
                    "scheduledCourse"
                  )
                })}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
                  2, 3, 4
                ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Avatar
                      avatarIconSlot={
                        <svg
                          className={classNames(
                            projectcss.all,
                            sty.svg___281S4
                          )}
                          role={"img"}
                        />
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.avatar___0Yecr
                      )}
                      key={currentIndex}
                    />
                  );
                })}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__hGjci, {
                  [sty.freeBoxusage_courseEvent__hGjciwGjRh]: hasVariant(
                    $state,
                    "usage",
                    "courseEvent"
                  ),
                  [sty.freeBoxusage_scheduledCourse__hGjciIuYrB]: hasVariant(
                    $state,
                    "usage",
                    "scheduledCourse"
                  )
                })}
              >
                <div
                  data-plasmic-name={"headline3"}
                  data-plasmic-override={overrides.headline3}
                  className={classNames(projectcss.all, sty.headline3, {
                    [sty.headline3usage_level]: hasVariant(
                      $state,
                      "usage",
                      "level"
                    ),
                    [sty.headline3usage_scheduledCourse]: hasVariant(
                      $state,
                      "usage",
                      "scheduledCourse"
                    )
                  })}
                >
                  {renderPlasmicSlot({
                    defaultContents: "Headline",
                    value: args.children3,
                    className: classNames(sty.slotTargetChildren3, {
                      [sty.slotTargetChildren3fontColor_boldBlue]: hasVariant(
                        $state,
                        "fontColor",
                        "boldBlue"
                      ),
                      [sty.slotTargetChildren3fontColor_boldGray]: hasVariant(
                        $state,
                        "fontColor",
                        "boldGray"
                      ),
                      [sty.slotTargetChildren3fontColor_boldPink]: hasVariant(
                        $state,
                        "fontColor",
                        "boldPink"
                      ),
                      [sty.slotTargetChildren3fontColor_boldYellow]: hasVariant(
                        $state,
                        "fontColor",
                        "boldYellow"
                      ),
                      [sty.slotTargetChildren3fontColor_subtleBlue]: hasVariant(
                        $state,
                        "fontColor",
                        "subtleBlue"
                      ),
                      [sty.slotTargetChildren3fontColor_subtleGray]: hasVariant(
                        $state,
                        "fontColor",
                        "subtleGray"
                      ),
                      [sty.slotTargetChildren3fontColor_subtlePink]: hasVariant(
                        $state,
                        "fontColor",
                        "subtlePink"
                      ),
                      [sty.slotTargetChildren3fontColor_subtleYellow]:
                        hasVariant($state, "fontColor", "subtleYellow"),
                      [sty.slotTargetChildren3fontColor_white]: hasVariant(
                        $state,
                        "fontColor",
                        "white"
                      ),
                      [sty.slotTargetChildren3usage_courseEvent]: hasVariant(
                        $state,
                        "usage",
                        "courseEvent"
                      ),
                      [sty.slotTargetChildren3usage_courseTopic]: hasVariant(
                        $state,
                        "usage",
                        "courseTopic"
                      ),
                      [sty.slotTargetChildren3usage_level]: hasVariant(
                        $state,
                        "usage",
                        "level"
                      )
                    })
                  })}
                </div>
                {renderPlasmicSlot({
                  defaultContents: "Subheadline",
                  value: args.slot5,
                  className: classNames(sty.slotTargetSlot5, {
                    [sty.slotTargetSlot5fontColor_boldBlue]: hasVariant(
                      $state,
                      "fontColor",
                      "boldBlue"
                    ),
                    [sty.slotTargetSlot5fontColor_boldGray]: hasVariant(
                      $state,
                      "fontColor",
                      "boldGray"
                    ),
                    [sty.slotTargetSlot5fontColor_boldPink]: hasVariant(
                      $state,
                      "fontColor",
                      "boldPink"
                    ),
                    [sty.slotTargetSlot5fontColor_boldYellow]: hasVariant(
                      $state,
                      "fontColor",
                      "boldYellow"
                    ),
                    [sty.slotTargetSlot5fontColor_subtleBlue]: hasVariant(
                      $state,
                      "fontColor",
                      "subtleBlue"
                    ),
                    [sty.slotTargetSlot5fontColor_subtleGray]: hasVariant(
                      $state,
                      "fontColor",
                      "subtleGray"
                    ),
                    [sty.slotTargetSlot5fontColor_subtlePink]: hasVariant(
                      $state,
                      "fontColor",
                      "subtlePink"
                    ),
                    [sty.slotTargetSlot5fontColor_subtleYellow]: hasVariant(
                      $state,
                      "fontColor",
                      "subtleYellow"
                    ),
                    [sty.slotTargetSlot5fontColor_white]: hasVariant(
                      $state,
                      "fontColor",
                      "white"
                    ),
                    [sty.slotTargetSlot5usage_courseEvent]: hasVariant(
                      $state,
                      "usage",
                      "courseEvent"
                    )
                  })
                })}
              </div>
              <div
                data-plasmic-name={"time"}
                data-plasmic-override={overrides.time}
                className={classNames(projectcss.all, sty.time, {
                  [sty.timeusage_courseEvent]: hasVariant(
                    $state,
                    "usage",
                    "courseEvent"
                  ),
                  [sty.timeusage_instructor]: hasVariant(
                    $state,
                    "usage",
                    "instructor"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ne45W,
                    {
                      [sty.textusage_scheduledCourse__ne45WIuYrB]: hasVariant(
                        $state,
                        "usage",
                        "scheduledCourse"
                      )
                    }
                  )}
                >
                  {"9 AM - 10 AM"}
                </div>
              </div>
            </Stack__>
            <Separator
              className={classNames("__wab_instance", sty.separator__zqVs, {
                [sty.separatorusage_scheduledCourse__zqVsIuYrB]: hasVariant(
                  $state,
                  "usage",
                  "scheduledCourse"
                )
              })}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              hasGap={true}
              className={classNames(projectcss.all, sty.footer, {
                [sty.footerusage_scheduledCourse]: hasVariant(
                  $state,
                  "usage",
                  "scheduledCourse"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__x6Kp3, {
                  [sty.freeBoxusage_scheduledCourse__x6Kp3IuYrB]: hasVariant(
                    $state,
                    "usage",
                    "scheduledCourse"
                  )
                })}
              >
                <Avatar
                  avatarIconSlot={
                    <svg
                      className={classNames(projectcss.all, sty.svg__zxAP)}
                      role={"img"}
                    />
                  }
                  className={classNames("__wab_instance", sty.avatar__iW2Pw)}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__mxCpg, {
                    [sty.freeBoxusage_scheduledCourse__mxCpgIuYrB]: hasVariant(
                      $state,
                      "usage",
                      "scheduledCourse"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"headline2"}
                    data-plasmic-override={overrides.headline2}
                    className={classNames(projectcss.all, sty.headline2, {
                      [sty.headline2usage_level]: hasVariant(
                        $state,
                        "usage",
                        "level"
                      )
                    })}
                  >
                    {renderPlasmicSlot({
                      defaultContents: "Headline",
                      value: args.children2,
                      className: classNames(sty.slotTargetChildren2, {
                        [sty.slotTargetChildren2fontColor_boldBlue]: hasVariant(
                          $state,
                          "fontColor",
                          "boldBlue"
                        ),
                        [sty.slotTargetChildren2fontColor_boldGray]: hasVariant(
                          $state,
                          "fontColor",
                          "boldGray"
                        ),
                        [sty.slotTargetChildren2fontColor_boldPink]: hasVariant(
                          $state,
                          "fontColor",
                          "boldPink"
                        ),
                        [sty.slotTargetChildren2fontColor_boldYellow]:
                          hasVariant($state, "fontColor", "boldYellow"),
                        [sty.slotTargetChildren2fontColor_subtleBlue]:
                          hasVariant($state, "fontColor", "subtleBlue"),
                        [sty.slotTargetChildren2fontColor_subtleGray]:
                          hasVariant($state, "fontColor", "subtleGray"),
                        [sty.slotTargetChildren2fontColor_subtlePink]:
                          hasVariant($state, "fontColor", "subtlePink"),
                        [sty.slotTargetChildren2fontColor_subtleYellow]:
                          hasVariant($state, "fontColor", "subtleYellow"),
                        [sty.slotTargetChildren2fontColor_white]: hasVariant(
                          $state,
                          "fontColor",
                          "white"
                        ),
                        [sty.slotTargetChildren2usage_courseEvent]: hasVariant(
                          $state,
                          "usage",
                          "courseEvent"
                        ),
                        [sty.slotTargetChildren2usage_courseTopic]: hasVariant(
                          $state,
                          "usage",
                          "courseTopic"
                        ),
                        [sty.slotTargetChildren2usage_level]: hasVariant(
                          $state,
                          "usage",
                          "level"
                        )
                      })
                    })}
                  </div>
                  {renderPlasmicSlot({
                    defaultContents: "Subheadline",
                    value: args.slot4,
                    className: classNames(sty.slotTargetSlot4, {
                      [sty.slotTargetSlot4fontColor_boldBlue]: hasVariant(
                        $state,
                        "fontColor",
                        "boldBlue"
                      ),
                      [sty.slotTargetSlot4fontColor_boldGray]: hasVariant(
                        $state,
                        "fontColor",
                        "boldGray"
                      ),
                      [sty.slotTargetSlot4fontColor_boldPink]: hasVariant(
                        $state,
                        "fontColor",
                        "boldPink"
                      ),
                      [sty.slotTargetSlot4fontColor_boldYellow]: hasVariant(
                        $state,
                        "fontColor",
                        "boldYellow"
                      ),
                      [sty.slotTargetSlot4fontColor_subtleBlue]: hasVariant(
                        $state,
                        "fontColor",
                        "subtleBlue"
                      ),
                      [sty.slotTargetSlot4fontColor_subtleGray]: hasVariant(
                        $state,
                        "fontColor",
                        "subtleGray"
                      ),
                      [sty.slotTargetSlot4fontColor_subtlePink]: hasVariant(
                        $state,
                        "fontColor",
                        "subtlePink"
                      ),
                      [sty.slotTargetSlot4fontColor_subtleYellow]: hasVariant(
                        $state,
                        "fontColor",
                        "subtleYellow"
                      ),
                      [sty.slotTargetSlot4fontColor_white]: hasVariant(
                        $state,
                        "fontColor",
                        "white"
                      )
                    })
                  })}
                </div>
              </div>
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                anatomy={["ghost", "outlined"]}
                className={classNames("__wab_instance", sty.button)}
                shape={undefined}
              />
            </Stack__>
            <Separator
              className={classNames("__wab_instance", sty.separator__r0HZj)}
            />
          </Stack__>
        </Stack__>
        <div
          data-plasmic-name={"action"}
          data-plasmic-override={overrides.action}
          className={classNames(projectcss.all, sty.action, {
            [sty.actionusage_courseEvent]: hasVariant(
              $state,
              "usage",
              "courseEvent"
            ),
            [sty.actionusage_courseLessons]: hasVariant(
              $state,
              "usage",
              "courseLessons"
            ),
            [sty.actionusage_courseTopic]: hasVariant(
              $state,
              "usage",
              "courseTopic"
            ),
            [sty.actionusage_course]: hasVariant($state, "usage", "course"),
            [sty.actionusage_header]: hasVariant($state, "usage", "header"),
            [sty.actionusage_instructor]: hasVariant(
              $state,
              "usage",
              "instructor"
            ),
            [sty.actionusage_level]: hasVariant($state, "usage", "level"),
            [sty.actionusage_passwordReset]: hasVariant(
              $state,
              "usage",
              "passwordReset"
            ),
            [sty.actionusage_purchaseCourse]: hasVariant(
              $state,
              "usage",
              "purchaseCourse"
            ),
            [sty.actionusage_scheduledCourse]: hasVariant(
              $state,
              "usage",
              "scheduledCourse"
            ),
            [sty.actionusage_topicB]: hasVariant($state, "usage", "topicB")
          })}
        >
          <div
            data-plasmic-name={"navigation"}
            data-plasmic-override={overrides.navigation}
            className={classNames(projectcss.all, sty.navigation, {
              [sty.navigationbackgroundPattern_unnamedVariant]: hasVariant(
                $state,
                "backgroundPattern",
                "unnamedVariant"
              ),
              [sty.navigationusage_courseEvent]: hasVariant(
                $state,
                "usage",
                "courseEvent"
              ),
              [sty.navigationusage_courseTopic]: hasVariant(
                $state,
                "usage",
                "courseTopic"
              ),
              [sty.navigationusage_course]: hasVariant(
                $state,
                "usage",
                "course"
              ),
              [sty.navigationusage_header]: hasVariant(
                $state,
                "usage",
                "header"
              ),
              [sty.navigationusage_passwordReset]: hasVariant(
                $state,
                "usage",
                "passwordReset"
              )
            })}
          >
            <Button
              data-plasmic-name={"rightCarrotButton"}
              data-plasmic-override={overrides.rightCarrotButton}
              anatomy={
                hasVariant($state, "usage", "courseTopic") ? [] : ["ghost"]
              }
              className={classNames("__wab_instance", sty.rightCarrotButton, {
                [sty.rightCarrotButtonbackgroundPattern_unnamedVariant]:
                  hasVariant($state, "backgroundPattern", "unnamedVariant"),
                [sty.rightCarrotButtonusage_courseTopic]: hasVariant(
                  $state,
                  "usage",
                  "courseTopic"
                ),
                [sty.rightCarrotButtonusage_course]: hasVariant(
                  $state,
                  "usage",
                  "course"
                ),
                [sty.rightCarrotButtonusage_header]: hasVariant(
                  $state,
                  "usage",
                  "header"
                ),
                [sty.rightCarrotButtonusage_instructor]: hasVariant(
                  $state,
                  "usage",
                  "instructor"
                ),
                [sty.rightCarrotButtonusage_purchaseCourse]: hasVariant(
                  $state,
                  "usage",
                  "purchaseCourse"
                ),
                [sty.rightCarrotButtonusage_topicA]: hasVariant(
                  $state,
                  "usage",
                  "topicA"
                ),
                [sty.rightCarrotButtonusage_topicB]: hasVariant(
                  $state,
                  "usage",
                  "topicB"
                )
              })}
              iconOnly={
                hasVariant($state, "usage", "courseTopic") ? undefined : true
              }
              showStartIcon={
                hasVariant($state, "usage", "courseTopic") ? undefined : true
              }
              startIcon={
                <FaAngleRightsvgIcon
                  className={classNames(projectcss.all, sty.svg__pKHbU, {
                    [sty.svgusage_courseTopic__pKHbU08YtE]: hasVariant(
                      $state,
                      "usage",
                      "courseTopic"
                    )
                  })}
                  role={"img"}
                />
              }
            >
              {hasVariant($state, "usage", "courseTopic") ? "Join" : "Button"}
            </Button>
            {renderPlasmicSlot({
              defaultContents: (
                <Button
                  anatomy={["outlined", "ghost"]}
                  className={classNames("__wab_instance", sty.button__xv7Wa)}
                  shape={undefined}
                >
                  {"Start Now"}
                </Button>
              ),
              value: args.joinButton2
            })}
          </div>
        </div>
      </Stack__>
      <div
        data-plasmic-name={"cardMedia"}
        data-plasmic-override={overrides.cardMedia}
        className={classNames(projectcss.all, sty.cardMedia, {
          [sty.cardMediareverseItem]: hasVariant(
            $state,
            "reverseItem",
            "reverseItem"
          ),
          [sty.cardMediausage_courseEvent]: hasVariant(
            $state,
            "usage",
            "courseEvent"
          ),
          [sty.cardMediausage_courseTopic]: hasVariant(
            $state,
            "usage",
            "courseTopic"
          ),
          [sty.cardMediausage_course]: hasVariant($state, "usage", "course"),
          [sty.cardMediausage_header]: hasVariant($state, "usage", "header"),
          [sty.cardMediausage_level]: hasVariant($state, "usage", "level"),
          [sty.cardMediausage_purchaseCourse]: hasVariant(
            $state,
            "usage",
            "purchaseCourse"
          ),
          [sty.cardMediausage_scheduledCourse]: hasVariant(
            $state,
            "usage",
            "scheduledCourse"
          ),
          [sty.cardMediausage_topicB]: hasVariant($state, "usage", "topicB")
        })}
      >
        <div
          data-plasmic-name={"cardIconSlot"}
          data-plasmic-override={overrides.cardIconSlot}
          className={classNames(projectcss.all, sty.cardIconSlot, {
            [sty.cardIconSlotusage_courseTopic]: hasVariant(
              $state,
              "usage",
              "courseTopic"
            ),
            [sty.cardIconSlotusage_course]: hasVariant(
              $state,
              "usage",
              "course"
            ),
            [sty.cardIconSlotusage_header]: hasVariant(
              $state,
              "usage",
              "header"
            ),
            [sty.cardIconSlotusage_level]: hasVariant($state, "usage", "level"),
            [sty.cardIconSlotusage_purchaseCourse]: hasVariant(
              $state,
              "usage",
              "purchaseCourse"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaHomesvgIcon
                className={classNames(projectcss.all, sty.svg__hzZrq)}
                role={"img"}
              />
            ),

            value: args.slot8
          })}
        </div>
        {(
          hasVariant($state, "usage", "purchaseCourse")
            ? true
            : hasVariant($state, "usage", "header")
            ? true
            : hasVariant($state, "usage", "course")
            ? true
            : false
        ) ? (
          <div
            data-plasmic-name={"cardImageSlot"}
            data-plasmic-override={overrides.cardImageSlot}
            className={classNames(projectcss.all, sty.cardImageSlot, {
              [sty.cardImageSlotusage_courseTopic]: hasVariant(
                $state,
                "usage",
                "courseTopic"
              ),
              [sty.cardImageSlotusage_course]: hasVariant(
                $state,
                "usage",
                "course"
              ),
              [sty.cardImageSlotusage_header]: hasVariant(
                $state,
                "usage",
                "header"
              ),
              [sty.cardImageSlotusage_level]: hasVariant(
                $state,
                "usage",
                "level"
              ),
              [sty.cardImageSlotusage_purchaseCourse]: hasVariant(
                $state,
                "usage",
                "purchaseCourse"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__sb2Uk)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              ),

              value: args.slot12
            })}
            <div
              className={classNames(projectcss.all, sty.freeBox__qSqW, {
                [sty.freeBoxusage_purchaseCourse__qSqWupH64]: hasVariant(
                  $state,
                  "usage",
                  "purchaseCourse"
                )
              })}
            >
              <Badge
                avatarInitialsSlot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bbIBv
                    )}
                  >
                    {"BADGE"}
                  </div>
                }
                className={classNames("__wab_instance", sty.badge__f8Ko, {
                  [sty.badgeusage_course__f8KocUpAv]: hasVariant(
                    $state,
                    "usage",
                    "course"
                  )
                })}
              />
            </div>
          </div>
        ) : null}
      </div>
      <Badge
        className={classNames("__wab_instance", sty.badge__iC2Fq, {
          [sty.badgeusage_courseLessons__iC2FqUs9CY]: hasVariant(
            $state,
            "usage",
            "courseLessons"
          ),
          [sty.badgeusage_course__iC2FqcUpAv]: hasVariant(
            $state,
            "usage",
            "course"
          )
        })}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  card: [
    "card",
    "center",
    "item",
    "itemMedia",
    "itemIconSlot",
    "itemAvatarSlot",
    "itemImageSlot",
    "img",
    "body",
    "headers",
    "details",
    "leftSideItems",
    "rightSideItems",
    "headlines",
    "headline",
    "rightSideItems2",
    "subHeadlines",
    "subHeadline",
    "subHeadline2",
    "content",
    "mid",
    "avatars",
    "headline3",
    "time",
    "footer",
    "headline2",
    "button",
    "action",
    "navigation",
    "rightCarrotButton",
    "cardMedia",
    "cardIconSlot",
    "cardImageSlot"
  ],
  center: [
    "center",
    "item",
    "itemMedia",
    "itemIconSlot",
    "itemAvatarSlot",
    "itemImageSlot",
    "img",
    "body",
    "headers",
    "details",
    "leftSideItems",
    "rightSideItems",
    "headlines",
    "headline",
    "rightSideItems2",
    "subHeadlines",
    "subHeadline",
    "subHeadline2",
    "content",
    "mid",
    "avatars",
    "headline3",
    "time",
    "footer",
    "headline2",
    "button",
    "action",
    "navigation",
    "rightCarrotButton"
  ],
  item: [
    "item",
    "itemMedia",
    "itemIconSlot",
    "itemAvatarSlot",
    "itemImageSlot",
    "img",
    "body",
    "headers",
    "details",
    "leftSideItems",
    "rightSideItems",
    "headlines",
    "headline",
    "rightSideItems2",
    "subHeadlines",
    "subHeadline",
    "subHeadline2",
    "content",
    "mid",
    "avatars",
    "headline3",
    "time",
    "footer",
    "headline2",
    "button"
  ],
  itemMedia: [
    "itemMedia",
    "itemIconSlot",
    "itemAvatarSlot",
    "itemImageSlot",
    "img"
  ],
  itemIconSlot: ["itemIconSlot"],
  itemAvatarSlot: ["itemAvatarSlot"],
  itemImageSlot: ["itemImageSlot", "img"],
  img: ["img"],
  body: [
    "body",
    "headers",
    "details",
    "leftSideItems",
    "rightSideItems",
    "headlines",
    "headline",
    "rightSideItems2",
    "subHeadlines",
    "subHeadline",
    "subHeadline2",
    "content",
    "mid",
    "avatars",
    "headline3",
    "time",
    "footer",
    "headline2",
    "button"
  ],
  headers: [
    "headers",
    "details",
    "leftSideItems",
    "rightSideItems",
    "headlines",
    "headline",
    "rightSideItems2",
    "subHeadlines",
    "subHeadline",
    "subHeadline2",
    "content"
  ],
  details: ["details", "leftSideItems", "rightSideItems"],
  leftSideItems: ["leftSideItems"],
  rightSideItems: ["rightSideItems"],
  headlines: [
    "headlines",
    "headline",
    "rightSideItems2",
    "subHeadlines",
    "subHeadline",
    "subHeadline2"
  ],
  headline: ["headline", "rightSideItems2"],
  rightSideItems2: ["rightSideItems2"],
  subHeadlines: ["subHeadlines", "subHeadline", "subHeadline2"],
  subHeadline: ["subHeadline"],
  subHeadline2: ["subHeadline2"],
  content: ["content"],
  mid: ["mid", "avatars", "headline3", "time"],
  avatars: ["avatars"],
  headline3: ["headline3"],
  time: ["time"],
  footer: ["footer", "headline2", "button"],
  headline2: ["headline2"],
  button: ["button"],
  action: ["action", "navigation", "rightCarrotButton"],
  navigation: ["navigation", "rightCarrotButton"],
  rightCarrotButton: ["rightCarrotButton"],
  cardMedia: ["cardMedia", "cardIconSlot", "cardImageSlot"],
  cardIconSlot: ["cardIconSlot"],
  cardImageSlot: ["cardImageSlot"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  card: "div";
  center: "div";
  item: "div";
  itemMedia: "div";
  itemIconSlot: "div";
  itemAvatarSlot: "div";
  itemImageSlot: "div";
  img: typeof PlasmicImg__;
  body: "div";
  headers: "div";
  details: "div";
  leftSideItems: "div";
  rightSideItems: "div";
  headlines: "div";
  headline: "div";
  rightSideItems2: "div";
  subHeadlines: "div";
  subHeadline: "div";
  subHeadline2: "div";
  content: "div";
  mid: "div";
  avatars: "div";
  headline3: "div";
  time: "div";
  footer: "div";
  headline2: "div";
  button: typeof Button;
  action: "div";
  navigation: "div";
  rightCarrotButton: typeof Button;
  cardMedia: "div";
  cardIconSlot: "div";
  cardImageSlot: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCourseCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCourseCard__VariantsArgs;
    args?: PlasmicCourseCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCourseCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCourseCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCourseCard__ArgProps,
          internalVariantPropNames: PlasmicCourseCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCourseCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "card") {
    func.displayName = "PlasmicCourseCard";
  } else {
    func.displayName = `PlasmicCourseCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCourseCard = Object.assign(
  // Top-level PlasmicCourseCard renders the root element
  makeNodeComponent("card"),
  {
    // Helper components rendering sub-elements
    center: makeNodeComponent("center"),
    item: makeNodeComponent("item"),
    itemMedia: makeNodeComponent("itemMedia"),
    itemIconSlot: makeNodeComponent("itemIconSlot"),
    itemAvatarSlot: makeNodeComponent("itemAvatarSlot"),
    itemImageSlot: makeNodeComponent("itemImageSlot"),
    img: makeNodeComponent("img"),
    body: makeNodeComponent("body"),
    headers: makeNodeComponent("headers"),
    details: makeNodeComponent("details"),
    leftSideItems: makeNodeComponent("leftSideItems"),
    rightSideItems: makeNodeComponent("rightSideItems"),
    headlines: makeNodeComponent("headlines"),
    headline: makeNodeComponent("headline"),
    rightSideItems2: makeNodeComponent("rightSideItems2"),
    subHeadlines: makeNodeComponent("subHeadlines"),
    subHeadline: makeNodeComponent("subHeadline"),
    subHeadline2: makeNodeComponent("subHeadline2"),
    content: makeNodeComponent("content"),
    mid: makeNodeComponent("mid"),
    avatars: makeNodeComponent("avatars"),
    headline3: makeNodeComponent("headline3"),
    time: makeNodeComponent("time"),
    footer: makeNodeComponent("footer"),
    headline2: makeNodeComponent("headline2"),
    button: makeNodeComponent("button"),
    action: makeNodeComponent("action"),
    navigation: makeNodeComponent("navigation"),
    rightCarrotButton: makeNodeComponent("rightCarrotButton"),
    cardMedia: makeNodeComponent("cardMedia"),
    cardIconSlot: makeNodeComponent("cardIconSlot"),
    cardImageSlot: makeNodeComponent("cardImageSlot"),

    // Metadata about props expected for PlasmicCourseCard
    internalVariantProps: PlasmicCourseCard__VariantProps,
    internalArgProps: PlasmicCourseCard__ArgProps
  }
);

export default PlasmicCourseCard;
/* prettier-ignore-end */

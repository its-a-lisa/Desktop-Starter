// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 71RGmKESGHwX1FQiVTH6Ch
// Component: E8631JBF9yCl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Image from "../../Image"; // plasmic-import: p-kJ8jBM6L2n/component
import Separator from "../../Separator"; // plasmic-import: iWSZkUWMNfpu/component
import Button from "../../Button"; // plasmic-import: 3BnfwULcRUyf/component

import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_separator_css from "../separator/plasmic.module.css"; // plasmic-import: mGt6E9beS9xM1LmsApto9L/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_badge_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 71RGmKESGHwX1FQiVTH6Ch/projectcss
import sty from "./PlasmicSiteCard.module.css"; // plasmic-import: E8631JBF9yCl/css

import FaChecksvgIcon from "../button/icons/PlasmicIcon__FaChecksvg"; // plasmic-import: L4y0LCanLhk0/icon
import FaArrowRightsvgIcon from "../button/icons/PlasmicIcon__FaArrowRightsvg"; // plasmic-import: vqTI491KdiJ9/icon

createPlasmicElementProxy;

export type PlasmicSiteCard__VariantMembers = {
  usage: "hero" | "goals" | "testimonial";
  backgroundColor:
    | "clear"
    | "subtleBlue"
    | "subtleYellow"
    | "subtlePink"
    | "subtleGray"
    | "boldBlue"
    | "boldYellow"
    | "boldPink"
    | "boldGray"
    | "subtleSecondary"
    | "subtlePrimary"
    | "subtleStandard"
    | "boldSecondary"
    | "boldPrimary"
    | "boldStandard";
  backgroundChanges: "lighten" | "darken" | "solid";
  reverseItem: "reverseItem";
  changeCardOrientation: "changeCardOrientation";
};
export type PlasmicSiteCard__VariantsArgs = {
  usage?: SingleChoiceArg<"hero" | "goals" | "testimonial">;
  backgroundColor?: SingleChoiceArg<
    | "clear"
    | "subtleBlue"
    | "subtleYellow"
    | "subtlePink"
    | "subtleGray"
    | "boldBlue"
    | "boldYellow"
    | "boldPink"
    | "boldGray"
    | "subtleSecondary"
    | "subtlePrimary"
    | "subtleStandard"
    | "boldSecondary"
    | "boldPrimary"
    | "boldStandard"
  >;
  backgroundChanges?: MultiChoiceArg<"lighten" | "darken" | "solid">;
  reverseItem?: SingleBooleanChoiceArg<"reverseItem">;
  changeCardOrientation?: SingleBooleanChoiceArg<"changeCardOrientation">;
};
type VariantPropType = keyof PlasmicSiteCard__VariantsArgs;
export const PlasmicSiteCard__VariantProps = new Array<VariantPropType>(
  "usage",
  "backgroundColor",
  "backgroundChanges",
  "reverseItem",
  "changeCardOrientation"
);

export type PlasmicSiteCard__ArgsType = {
  children?: React.ReactNode;
  children2?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSiteCard__ArgsType;
export const PlasmicSiteCard__ArgProps = new Array<ArgPropType>(
  "children",
  "children2",
  "slot2",
  "slot3"
);

export type PlasmicSiteCard__OverridesType = {
  card?: Flex__<"div">;
  contentStack?: Flex__<"div">;
  profilePhotoStack?: Flex__<"div">;
  image?: Flex__<typeof Image>;
  img?: Flex__<typeof PlasmicImg__>;
  headlineStack?: Flex__<"div">;
  h1?: Flex__<"h1">;
  h2?: Flex__<"h2">;
  separatorStack?: Flex__<"div">;
  separator?: Flex__<typeof Separator>;
  bodyStack?: Flex__<"div">;
  p?: Flex__<"p">;
  action?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  footerStack?: Flex__<"div">;
};

export interface DefaultSiteCardProps {
  children?: React.ReactNode;
  children2?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  usage?: SingleChoiceArg<"hero" | "goals" | "testimonial">;
  backgroundColor?: SingleChoiceArg<
    | "clear"
    | "subtleBlue"
    | "subtleYellow"
    | "subtlePink"
    | "subtleGray"
    | "boldBlue"
    | "boldYellow"
    | "boldPink"
    | "boldGray"
    | "subtleSecondary"
    | "subtlePrimary"
    | "subtleStandard"
    | "boldSecondary"
    | "boldPrimary"
    | "boldStandard"
  >;
  backgroundChanges?: MultiChoiceArg<"lighten" | "darken" | "solid">;
  reverseItem?: SingleBooleanChoiceArg<"reverseItem">;
  changeCardOrientation?: SingleBooleanChoiceArg<"changeCardOrientation">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSiteCard__RenderFunc(props: {
  variants: PlasmicSiteCard__VariantsArgs;
  args: PlasmicSiteCard__ArgsType;
  overrides: PlasmicSiteCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "backgroundColor",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.backgroundColor
      },
      {
        path: "backgroundChanges",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.backgroundChanges
      },
      {
        path: "reverseItem",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.reverseItem
      },
      {
        path: "changeCardOrientation",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.changeCardOrientation
      },
      {
        path: "usage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.usage
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode()
  });

  return (
    <div
      data-plasmic-name={"card"}
      data-plasmic-override={overrides.card}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_separator_css.plasmic_tokens,
        plasmic_image_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        plasmic_avatar_css.plasmic_tokens,
        plasmic_badge_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        sty.card,
        {
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [sty.cardbackgroundChanges_darken]: hasVariant(
            $state,
            "backgroundChanges",
            "darken"
          ),
          [sty.cardbackgroundChanges_darken_backgroundColor_boldBlue]:
            hasVariant($state, "backgroundColor", "boldBlue") &&
            hasVariant($state, "backgroundChanges", "darken"),
          [sty.cardbackgroundChanges_lighten]: hasVariant(
            $state,
            "backgroundChanges",
            "lighten"
          ),
          [sty.cardbackgroundChanges_lighten_backgroundChanges_solid_usage_testimonial]:
            hasVariant($state, "usage", "testimonial") &&
            hasVariant($state, "backgroundChanges", "solid") &&
            hasVariant($state, "backgroundChanges", "lighten"),
          [sty.cardbackgroundChanges_lighten_backgroundColor_boldBlue]:
            hasVariant($state, "backgroundChanges", "lighten") &&
            hasVariant($state, "backgroundColor", "boldBlue"),
          [sty.cardbackgroundChanges_solid]: hasVariant(
            $state,
            "backgroundChanges",
            "solid"
          ),
          [sty.cardbackgroundColor_boldBlue]: hasVariant(
            $state,
            "backgroundColor",
            "boldBlue"
          ),
          [sty.cardbackgroundColor_boldGray]: hasVariant(
            $state,
            "backgroundColor",
            "boldGray"
          ),
          [sty.cardbackgroundColor_boldPink]: hasVariant(
            $state,
            "backgroundColor",
            "boldPink"
          ),
          [sty.cardbackgroundColor_boldPrimary]: hasVariant(
            $state,
            "backgroundColor",
            "boldPrimary"
          ),
          [sty.cardbackgroundColor_boldSecondary]: hasVariant(
            $state,
            "backgroundColor",
            "boldSecondary"
          ),
          [sty.cardbackgroundColor_boldStandard]: hasVariant(
            $state,
            "backgroundColor",
            "boldStandard"
          ),
          [sty.cardbackgroundColor_boldYellow]: hasVariant(
            $state,
            "backgroundColor",
            "boldYellow"
          ),
          [sty.cardbackgroundColor_clear]: hasVariant(
            $state,
            "backgroundColor",
            "clear"
          ),
          [sty.cardbackgroundColor_subtleBlue]: hasVariant(
            $state,
            "backgroundColor",
            "subtleBlue"
          ),
          [sty.cardbackgroundColor_subtleGray]: hasVariant(
            $state,
            "backgroundColor",
            "subtleGray"
          ),
          [sty.cardbackgroundColor_subtlePink]: hasVariant(
            $state,
            "backgroundColor",
            "subtlePink"
          ),
          [sty.cardbackgroundColor_subtlePrimary]: hasVariant(
            $state,
            "backgroundColor",
            "subtlePrimary"
          ),
          [sty.cardbackgroundColor_subtleSecondary]: hasVariant(
            $state,
            "backgroundColor",
            "subtleSecondary"
          ),
          [sty.cardbackgroundColor_subtleStandard]: hasVariant(
            $state,
            "backgroundColor",
            "subtleStandard"
          ),
          [sty.cardbackgroundColor_subtleYellow]: hasVariant(
            $state,
            "backgroundColor",
            "subtleYellow"
          ),
          [sty.cardusage_goals]: hasVariant($state, "usage", "goals"),
          [sty.cardusage_testimonial]: hasVariant(
            $state,
            "usage",
            "testimonial"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__gBjo, {
          [sty.freeBoxusage_goals__gBjo9Hmo6]: hasVariant(
            $state,
            "usage",
            "goals"
          )
        })}
      >
        <div
          data-plasmic-name={"contentStack"}
          data-plasmic-override={overrides.contentStack}
          className={classNames(projectcss.all, sty.contentStack, {
            [sty.contentStackusage_goals]: hasVariant($state, "usage", "goals")
          })}
        >
          <div
            data-plasmic-name={"profilePhotoStack"}
            data-plasmic-override={overrides.profilePhotoStack}
            className={classNames(projectcss.all, sty.profilePhotoStack, {
              [sty.profilePhotoStackusage_testimonial]: hasVariant(
                $state,
                "usage",
                "testimonial"
              )
            })}
          >
            <Image
              data-plasmic-name={"image"}
              data-plasmic-override={overrides.image}
              altAspectRatio={"_43"}
              className={classNames("__wab_instance", sty.image)}
              imageSlot={
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              }
              padding={true}
            />
          </div>
          <div
            data-plasmic-name={"headlineStack"}
            data-plasmic-override={overrides.headlineStack}
            className={classNames(projectcss.all, sty.headlineStack, {
              [sty.headlineStackusage_testimonial]: hasVariant(
                $state,
                "usage",
                "testimonial"
              )
            })}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(projectcss.all, projectcss.h1, sty.h1, {
                [sty.h1backgroundChanges_darken]: hasVariant(
                  $state,
                  "backgroundChanges",
                  "darken"
                ),
                [sty.h1backgroundChanges_lighten_backgroundColor_boldBlue]:
                  hasVariant($state, "backgroundChanges", "lighten") &&
                  hasVariant($state, "backgroundColor", "boldBlue"),
                [sty.h1backgroundColor_boldBlue]: hasVariant(
                  $state,
                  "backgroundColor",
                  "boldBlue"
                ),
                [sty.h1backgroundColor_boldGray]: hasVariant(
                  $state,
                  "backgroundColor",
                  "boldGray"
                ),
                [sty.h1backgroundColor_boldPink]: hasVariant(
                  $state,
                  "backgroundColor",
                  "boldPink"
                ),
                [sty.h1backgroundColor_boldPrimary]: hasVariant(
                  $state,
                  "backgroundColor",
                  "boldPrimary"
                ),
                [sty.h1backgroundColor_boldSecondary]: hasVariant(
                  $state,
                  "backgroundColor",
                  "boldSecondary"
                ),
                [sty.h1backgroundColor_boldStandard]: hasVariant(
                  $state,
                  "backgroundColor",
                  "boldStandard"
                ),
                [sty.h1usage_goals]: hasVariant($state, "usage", "goals")
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "Headline",
                value: args.children
              })}
            </h1>
            {(hasVariant($state, "usage", "goals") ? true : false) ? (
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(projectcss.all, projectcss.h2, sty.h2, {
                  [sty.h2usage_goals]: hasVariant($state, "usage", "goals")
                })}
              >
                {renderPlasmicSlot({
                  defaultContents: "Headline",
                  value: args.children2
                })}
              </h2>
            ) : null}
          </div>
          <div
            data-plasmic-name={"separatorStack"}
            data-plasmic-override={overrides.separatorStack}
            className={classNames(projectcss.all, sty.separatorStack, {
              [sty.separatorStackusage_goals]: hasVariant(
                $state,
                "usage",
                "goals"
              ),
              [sty.separatorStackusage_testimonial]: hasVariant(
                $state,
                "usage",
                "testimonial"
              )
            })}
          >
            <Separator
              data-plasmic-name={"separator"}
              data-plasmic-override={overrides.separator}
              className={classNames("__wab_instance", sty.separator, {
                [sty.separatorusage_goals]: hasVariant($state, "usage", "goals")
              })}
              emphasis={
                hasVariant($state, "usage", "goals") ? "emphasis" : undefined
              }
              length={hasVariant($state, "usage", "goals") ? "full" : "_25"}
            />
          </div>
          <div
            data-plasmic-name={"bodyStack"}
            data-plasmic-override={overrides.bodyStack}
            className={classNames(projectcss.all, sty.bodyStack, {
              [sty.bodyStackusage_goals]: hasVariant($state, "usage", "goals"),
              [sty.bodyStackusage_testimonial]: hasVariant(
                $state,
                "usage",
                "testimonial"
              )
            })}
          >
            <p
              data-plasmic-name={"p"}
              data-plasmic-override={overrides.p}
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p,
                {
                  [sty.pbackgroundChanges_darken]: hasVariant(
                    $state,
                    "backgroundChanges",
                    "darken"
                  ),
                  [sty.pbackgroundColor_boldBlue]: hasVariant(
                    $state,
                    "backgroundColor",
                    "boldBlue"
                  ),
                  [sty.pbackgroundColor_boldGray]: hasVariant(
                    $state,
                    "backgroundColor",
                    "boldGray"
                  ),
                  [sty.pbackgroundColor_boldPink]: hasVariant(
                    $state,
                    "backgroundColor",
                    "boldPink"
                  ),
                  [sty.pbackgroundColor_boldPrimary]: hasVariant(
                    $state,
                    "backgroundColor",
                    "boldPrimary"
                  ),
                  [sty.pbackgroundColor_boldSecondary]: hasVariant(
                    $state,
                    "backgroundColor",
                    "boldSecondary"
                  ),
                  [sty.pbackgroundColor_boldStandard]: hasVariant(
                    $state,
                    "backgroundColor",
                    "boldStandard"
                  ),
                  [sty.pbackgroundColor_boldYellow]: hasVariant(
                    $state,
                    "backgroundColor",
                    "boldYellow"
                  )
                }
              )}
            >
              {"Enter some text"}
            </p>
          </div>
        </div>
        <div
          data-plasmic-name={"action"}
          data-plasmic-override={overrides.action}
          className={classNames(projectcss.all, sty.action, {
            [sty.actionusage_goals]: hasVariant($state, "usage", "goals")
          })}
        >
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            shape={undefined}
          />
        </div>
        <div
          data-plasmic-name={"footerStack"}
          data-plasmic-override={overrides.footerStack}
          className={classNames(projectcss.all, sty.footerStack, {
            [sty.footerStackusage_goals]: hasVariant($state, "usage", "goals"),
            [sty.footerStackusage_testimonial]: hasVariant(
              $state,
              "usage",
              "testimonial"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__sJ9HD)}>
            {renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.slot2,
              className: classNames(sty.slotTargetSlot2)
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ynm0O)}>
            {renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.slot3,
              className: classNames(sty.slotTargetSlot3)
            })}
          </div>
        </div>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  card: [
    "card",
    "contentStack",
    "profilePhotoStack",
    "image",
    "img",
    "headlineStack",
    "h1",
    "h2",
    "separatorStack",
    "separator",
    "bodyStack",
    "p",
    "action",
    "button",
    "footerStack"
  ],
  contentStack: [
    "contentStack",
    "profilePhotoStack",
    "image",
    "img",
    "headlineStack",
    "h1",
    "h2",
    "separatorStack",
    "separator",
    "bodyStack",
    "p"
  ],
  profilePhotoStack: ["profilePhotoStack", "image", "img"],
  image: ["image", "img"],
  img: ["img"],
  headlineStack: ["headlineStack", "h1", "h2"],
  h1: ["h1"],
  h2: ["h2"],
  separatorStack: ["separatorStack", "separator"],
  separator: ["separator"],
  bodyStack: ["bodyStack", "p"],
  p: ["p"],
  action: ["action", "button"],
  button: ["button"],
  footerStack: ["footerStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  card: "div";
  contentStack: "div";
  profilePhotoStack: "div";
  image: typeof Image;
  img: typeof PlasmicImg__;
  headlineStack: "div";
  h1: "h1";
  h2: "h2";
  separatorStack: "div";
  separator: typeof Separator;
  bodyStack: "div";
  p: "p";
  action: "div";
  button: typeof Button;
  footerStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSiteCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSiteCard__VariantsArgs;
    args?: PlasmicSiteCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSiteCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSiteCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSiteCard__ArgProps,
          internalVariantPropNames: PlasmicSiteCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSiteCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "card") {
    func.displayName = "PlasmicSiteCard";
  } else {
    func.displayName = `PlasmicSiteCard.${nodeName}`;
  }
  return func;
}

export const PlasmicSiteCard = Object.assign(
  // Top-level PlasmicSiteCard renders the root element
  makeNodeComponent("card"),
  {
    // Helper components rendering sub-elements
    contentStack: makeNodeComponent("contentStack"),
    profilePhotoStack: makeNodeComponent("profilePhotoStack"),
    image: makeNodeComponent("image"),
    img: makeNodeComponent("img"),
    headlineStack: makeNodeComponent("headlineStack"),
    h1: makeNodeComponent("h1"),
    h2: makeNodeComponent("h2"),
    separatorStack: makeNodeComponent("separatorStack"),
    separator: makeNodeComponent("separator"),
    bodyStack: makeNodeComponent("bodyStack"),
    p: makeNodeComponent("p"),
    action: makeNodeComponent("action"),
    button: makeNodeComponent("button"),
    footerStack: makeNodeComponent("footerStack"),

    // Metadata about props expected for PlasmicSiteCard
    internalVariantProps: PlasmicSiteCard__VariantProps,
    internalArgProps: PlasmicSiteCard__ArgProps
  }
);

export default PlasmicSiteCard;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xoA7omHX1aucC3LFX3rgWp
// Component: ljjoE6e4rGJl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Container from "../../Container"; // plasmic-import: yjb-qhVvhQe-/component
import Button from "../../Button"; // plasmic-import: 3AR6h0473ToW/component
import UtilityComponentBasic from "../../UtilityComponentBasic"; // plasmic-import: LZp_U1bOR5lV/component

import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant
import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_desktop_ui_theme_css from "../desktop_ui_theme/plasmic.module.css"; // plasmic-import: 6eqm1KNiFrAWEs21Xh4t1D/projectcss
import plasmic_advance_card_css from "../advance_card/plasmic.module.css"; // plasmic-import: 71RGmKESGHwX1FQiVTH6Ch/projectcss
import plasmic_form_input_css from "../form_input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_statistic_css from "../statistic/plasmic.module.css"; // plasmic-import: tq1m84LuCppLaXTJBWMK12/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_container_css from "../container/plasmic.module.css"; // plasmic-import: d9PrY1SRs2wAiwFXTkwPXt/projectcss
import plasmic_switch_css from "../switch/plasmic.module.css"; // plasmic-import: i4n9AbVD4xq7VvHzvrVDh9/projectcss
import plasmic_badge_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_separator_css from "../separator/plasmic.module.css"; // plasmic-import: mGt6E9beS9xM1LmsApto9L/projectcss
import plasmic_form_checkbox_css from "../form_checkbox/plasmic.module.css"; // plasmic-import: bEVQSMSYHutfoPgsCgDaki/projectcss
import plasmic_form_select_css from "../form_select/plasmic.module.css"; // plasmic-import: ivrmEdvdUKbShkHq3Wnmy4/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: xoA7omHX1aucC3LFX3rgWp/projectcss
import sty from "./PlasmicAboutSectionAbout.module.css"; // plasmic-import: ljjoE6e4rGJl/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 1l0k0f8No_g4/icon
import FaArrowRightsvgIcon from "../icons/icons/PlasmicIcon__FaArrowRightsvg"; // plasmic-import: laMKK4I5P9un/icon

createPlasmicElementProxy;

export type PlasmicAboutSectionAbout__VariantMembers = {};
export type PlasmicAboutSectionAbout__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutSectionAbout__VariantsArgs;
export const PlasmicAboutSectionAbout__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAboutSectionAbout__ArgsType = {};
type ArgPropType = keyof PlasmicAboutSectionAbout__ArgsType;
export const PlasmicAboutSectionAbout__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutSectionAbout__OverridesType = {
  aboutContainer?: Flex__<typeof Container>;
  aboutSection?: Flex__<"div">;
  aboutGroup?: Flex__<"div">;
  aboutItem1?: Flex__<"div">;
  aboutItem2?: Flex__<"div">;
  utilityComponentBasic?: Flex__<typeof UtilityComponentBasic>;
  aboutItem3?: Flex__<"div">;
};

export interface DefaultAboutSectionAboutProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAboutSectionAbout__RenderFunc(props: {
  variants: PlasmicAboutSectionAbout__VariantsArgs;
  args: PlasmicAboutSectionAbout__ArgsType;
  overrides: PlasmicAboutSectionAbout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsohEUf6Jd0EV8(),
    mode: useMode()
  });

  return (
    <Container
      data-plasmic-name={"aboutContainer"}
      data-plasmic-override={overrides.aboutContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.aboutContainer)}
      containerLayout={["heightHug"]}
      containerSlot={
        <div
          data-plasmic-name={"aboutSection"}
          data-plasmic-override={overrides.aboutSection}
          className={classNames(projectcss.all, sty.aboutSection)}
        >
          <div
            data-plasmic-name={"aboutGroup"}
            data-plasmic-override={overrides.aboutGroup}
            className={classNames(projectcss.all, sty.aboutGroup)}
          >
            <div
              data-plasmic-name={"aboutItem1"}
              data-plasmic-override={overrides.aboutItem1}
              className={classNames(projectcss.all, sty.aboutItem1)}
            >
              <div className={classNames(projectcss.all, sty.columns__xxX1R)}>
                <div className={classNames(projectcss.all, sty.column___8TpPg)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__z0MnZ)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"500px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image19.png",
                      fullWidth: 1040,
                      fullHeight: 1040,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__oPUt)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__duWn)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ilfF9)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__bXzhJ)}
                        displayHeight={"2px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"26px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/desktop_starter/images/image20.svg",
                          fullWidth: 300,
                          fullHeight: 23,
                          aspectRatio: 13
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b4KwF
                        )}
                      >
                        {"Lorem Ipsum"}
                      </div>
                    </div>
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__yuJ42
                      )}
                    >
                      {"Lorem Ipsum"}
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__z30AM
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. "
                      }
                    </div>
                    <Button
                      background={"primary"}
                      className={classNames(
                        "__wab_instance",
                        sty.button__dGUjr
                      )}
                      endIcon={
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__gNlxu)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__gi9AX)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6Ctnd
                        )}
                      >
                        {"lorem Ipsum"}
                      </div>
                    </Button>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"aboutItem2"}
              data-plasmic-override={overrides.aboutItem2}
              className={classNames(projectcss.all, sty.aboutItem2)}
            >
              <div className={classNames(projectcss.all, sty.columns__sl5X7)}>
                <div className={classNames(projectcss.all, sty.column___3BtpB)}>
                  <UtilityComponentBasic
                    data-plasmic-name={"utilityComponentBasic"}
                    data-plasmic-override={overrides.utilityComponentBasic}
                    className={classNames(
                      "__wab_instance",
                      sty.utilityComponentBasic
                    )}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__lMuzf)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__oh28C)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"500px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image21.png",
                      fullWidth: 1040,
                      fullHeight: 1040,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__lilpl)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__efdRs)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__a5Isv)}
                        displayHeight={"24px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"24px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/desktop_starter/images/image22.svg",
                          fullWidth: 150,
                          fullHeight: 150,
                          aspectRatio: 1
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__thj65
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
                        }
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"aboutItem3"}
              data-plasmic-override={overrides.aboutItem3}
              className={classNames(projectcss.all, sty.aboutItem3)}
            >
              <div className={classNames(projectcss.all, sty.columns__eMvZ3)}>
                <div className={classNames(projectcss.all, sty.column___31RSt)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__xvchj)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"500px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image23.png",
                      fullWidth: 1040,
                      fullHeight: 1040,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__arrfy)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iOihl)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__cdoht)}
                        displayHeight={"24px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"24px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/desktop_starter/images/image22.svg",
                          fullWidth: 150,
                          fullHeight: 150,
                          aspectRatio: 1
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qmYjg
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
                        }
                      </div>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__uT9Lz)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__d3LlS)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zEtpt)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__zYzA4)}
                        displayHeight={"2px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"26px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/desktop_starter/images/image20.svg",
                          fullWidth: 300,
                          fullHeight: 23,
                          aspectRatio: 13
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jx00O
                        )}
                      >
                        {"Lorem Ipsum"}
                      </div>
                    </div>
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3___0HgtM
                      )}
                    >
                      {"Lorem Ipsum"}
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j1R5
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. "
                      }
                    </div>
                    <Button
                      background={"primary"}
                      className={classNames(
                        "__wab_instance",
                        sty.button__n7UmK
                      )}
                      endIcon={
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___92QHi
                          )}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__coIDx)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o0M9N
                        )}
                      >
                        {"lorem Ipsum"}
                      </div>
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      }
      contentLayout={["widthStretch", "heightHug"]}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  aboutContainer: [
    "aboutContainer",
    "aboutSection",
    "aboutGroup",
    "aboutItem1",
    "aboutItem2",
    "utilityComponentBasic",
    "aboutItem3"
  ],
  aboutSection: [
    "aboutSection",
    "aboutGroup",
    "aboutItem1",
    "aboutItem2",
    "utilityComponentBasic",
    "aboutItem3"
  ],
  aboutGroup: [
    "aboutGroup",
    "aboutItem1",
    "aboutItem2",
    "utilityComponentBasic",
    "aboutItem3"
  ],
  aboutItem1: ["aboutItem1"],
  aboutItem2: ["aboutItem2", "utilityComponentBasic"],
  utilityComponentBasic: ["utilityComponentBasic"],
  aboutItem3: ["aboutItem3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  aboutContainer: typeof Container;
  aboutSection: "div";
  aboutGroup: "div";
  aboutItem1: "div";
  aboutItem2: "div";
  utilityComponentBasic: typeof UtilityComponentBasic;
  aboutItem3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutSectionAbout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutSectionAbout__VariantsArgs;
    args?: PlasmicAboutSectionAbout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutSectionAbout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAboutSectionAbout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAboutSectionAbout__ArgProps,
          internalVariantPropNames: PlasmicAboutSectionAbout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAboutSectionAbout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "aboutContainer") {
    func.displayName = "PlasmicAboutSectionAbout";
  } else {
    func.displayName = `PlasmicAboutSectionAbout.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutSectionAbout = Object.assign(
  // Top-level PlasmicAboutSectionAbout renders the root element
  makeNodeComponent("aboutContainer"),
  {
    // Helper components rendering sub-elements
    aboutSection: makeNodeComponent("aboutSection"),
    aboutGroup: makeNodeComponent("aboutGroup"),
    aboutItem1: makeNodeComponent("aboutItem1"),
    aboutItem2: makeNodeComponent("aboutItem2"),
    utilityComponentBasic: makeNodeComponent("utilityComponentBasic"),
    aboutItem3: makeNodeComponent("aboutItem3"),

    // Metadata about props expected for PlasmicAboutSectionAbout
    internalVariantProps: PlasmicAboutSectionAbout__VariantProps,
    internalArgProps: PlasmicAboutSectionAbout__ArgProps
  }
);

export default PlasmicAboutSectionAbout;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xoA7omHX1aucC3LFX3rgWp
// Component: d2D5FO4eIVp0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Container from "../../Container"; // plasmic-import: yjb-qhVvhQe-/component
import Input from "../../Input"; // plasmic-import: G_6Yw3j04Kjy/component
import Button from "../../Button"; // plasmic-import: 3AR6h0473ToW/component

import { useScreenVariants as useScreenVariantst0N9QbVX87V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: T0n9qbV-X87V/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant
import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_desktop_ui_theme_css from "../desktop_ui_theme/plasmic.module.css"; // plasmic-import: 6eqm1KNiFrAWEs21Xh4t1D/projectcss
import plasmic_advance_card_css from "../advance_card/plasmic.module.css"; // plasmic-import: 71RGmKESGHwX1FQiVTH6Ch/projectcss
import plasmic_form_input_css from "../form_input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_statistic_css from "../statistic/plasmic.module.css"; // plasmic-import: tq1m84LuCppLaXTJBWMK12/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_container_css from "../container/plasmic.module.css"; // plasmic-import: d9PrY1SRs2wAiwFXTkwPXt/projectcss
import plasmic_switch_css from "../switch/plasmic.module.css"; // plasmic-import: i4n9AbVD4xq7VvHzvrVDh9/projectcss
import plasmic_badge_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_separator_css from "../separator/plasmic.module.css"; // plasmic-import: mGt6E9beS9xM1LmsApto9L/projectcss
import plasmic_form_checkbox_css from "../form_checkbox/plasmic.module.css"; // plasmic-import: bEVQSMSYHutfoPgsCgDaki/projectcss
import plasmic_form_select_css from "../form_select/plasmic.module.css"; // plasmic-import: ivrmEdvdUKbShkHq3Wnmy4/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: xoA7omHX1aucC3LFX3rgWp/projectcss
import sty from "./PlasmicCallToActionSectionCallToAction.module.css"; // plasmic-import: d2D5FO4eIVp0/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: ncbGhhPH29HJ/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: ra_xVl5-KB_J/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 1l0k0f8No_g4/icon
import FaArrowRightsvgIcon from "../icons/icons/PlasmicIcon__FaArrowRightsvg"; // plasmic-import: laMKK4I5P9un/icon

createPlasmicElementProxy;

export type PlasmicCallToActionSectionCallToAction__VariantMembers = {};
export type PlasmicCallToActionSectionCallToAction__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicCallToActionSectionCallToAction__VariantsArgs;
export const PlasmicCallToActionSectionCallToAction__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCallToActionSectionCallToAction__ArgsType = {};
type ArgPropType = keyof PlasmicCallToActionSectionCallToAction__ArgsType;
export const PlasmicCallToActionSectionCallToAction__ArgProps =
  new Array<ArgPropType>();

export type PlasmicCallToActionSectionCallToAction__OverridesType = {
  callToActionContainer?: Flex__<typeof Container>;
  callToActionSection?: Flex__<"div">;
  callToActionArea?: Flex__<"div">;
  h2?: Flex__<"h2">;
  callToActionInputStack?: Flex__<"div">;
  input?: Flex__<typeof Input>;
  button?: Flex__<typeof Button>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultCallToActionSectionCallToActionProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCallToActionSectionCallToAction__RenderFunc(props: {
  variants: PlasmicCallToActionSectionCallToAction__VariantsArgs;
  args: PlasmicCallToActionSectionCallToAction__ArgsType;
  overrides: PlasmicCallToActionSectionCallToAction__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantst0N9QbVX87V(),
    screen: useScreenVariantsohEUf6Jd0EV8(),
    mode: useMode()
  });

  return (
    <Container
      data-plasmic-name={"callToActionContainer"}
      data-plasmic-override={overrides.callToActionContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.callToActionContainer)}
      containerSlot={
        <div
          data-plasmic-name={"callToActionSection"}
          data-plasmic-override={overrides.callToActionSection}
          className={classNames(projectcss.all, sty.callToActionSection)}
        >
          <div
            data-plasmic-name={"callToActionArea"}
            data-plasmic-override={overrides.callToActionArea}
            className={classNames(projectcss.all, sty.callToActionArea)}
          >
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              {"Lorem Ipsum"}
            </h2>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mpMu
              )}
            >
              {
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex."
              }
            </div>
            <div
              data-plasmic-name={"callToActionInputStack"}
              data-plasmic-override={overrides.callToActionInputStack}
              className={classNames(projectcss.all, sty.callToActionInputStack)}
            >
              <Input
                data-plasmic-name={"input"}
                data-plasmic-override={overrides.input}
                className={classNames("__wab_instance", sty.input)}
                endIcon={
                  <Icon4Icon
                    className={classNames(projectcss.all, sty.svg__bIzvg)}
                    role={"img"}
                  />
                }
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["input", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                startIcon={
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__m9AxU)}
                    role={"img"}
                  />
                }
                value={generateStateValueProp($state, ["input", "value"]) ?? ""}
              />

              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                background={"primary"}
                className={classNames("__wab_instance", sty.button)}
                endIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__rZbA3)}
                    role={"img"}
                  />
                }
                startIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__q4HiH)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b0LZ
                  )}
                >
                  {"Subscribe"}
                </div>
              </Button>
            </div>
          </div>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"700px"}
            displayMaxWidth={"1140px"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/desktop_starter/images/image35.png",
              fullWidth: 2880,
              fullHeight: 900,
              aspectRatio: undefined
            }}
          />
        </div>
      }
      layer01={["backgroundSubtle"]}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  callToActionContainer: [
    "callToActionContainer",
    "callToActionSection",
    "callToActionArea",
    "h2",
    "callToActionInputStack",
    "input",
    "button",
    "img"
  ],
  callToActionSection: [
    "callToActionSection",
    "callToActionArea",
    "h2",
    "callToActionInputStack",
    "input",
    "button",
    "img"
  ],
  callToActionArea: [
    "callToActionArea",
    "h2",
    "callToActionInputStack",
    "input",
    "button"
  ],
  h2: ["h2"],
  callToActionInputStack: ["callToActionInputStack", "input", "button"],
  input: ["input"],
  button: ["button"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  callToActionContainer: typeof Container;
  callToActionSection: "div";
  callToActionArea: "div";
  h2: "h2";
  callToActionInputStack: "div";
  input: typeof Input;
  button: typeof Button;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCallToActionSectionCallToAction__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCallToActionSectionCallToAction__VariantsArgs;
    args?: PlasmicCallToActionSectionCallToAction__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicCallToActionSectionCallToAction__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicCallToActionSectionCallToAction__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicCallToActionSectionCallToAction__ArgProps,
          internalVariantPropNames:
            PlasmicCallToActionSectionCallToAction__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCallToActionSectionCallToAction__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "callToActionContainer") {
    func.displayName = "PlasmicCallToActionSectionCallToAction";
  } else {
    func.displayName = `PlasmicCallToActionSectionCallToAction.${nodeName}`;
  }
  return func;
}

export const PlasmicCallToActionSectionCallToAction = Object.assign(
  // Top-level PlasmicCallToActionSectionCallToAction renders the root element
  makeNodeComponent("callToActionContainer"),
  {
    // Helper components rendering sub-elements
    callToActionSection: makeNodeComponent("callToActionSection"),
    callToActionArea: makeNodeComponent("callToActionArea"),
    h2: makeNodeComponent("h2"),
    callToActionInputStack: makeNodeComponent("callToActionInputStack"),
    input: makeNodeComponent("input"),
    button: makeNodeComponent("button"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicCallToActionSectionCallToAction
    internalVariantProps: PlasmicCallToActionSectionCallToAction__VariantProps,
    internalArgProps: PlasmicCallToActionSectionCallToAction__ArgProps
  }
);

export default PlasmicCallToActionSectionCallToAction;
/* prettier-ignore-end */

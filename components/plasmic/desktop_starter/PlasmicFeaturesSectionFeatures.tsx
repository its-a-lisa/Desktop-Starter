// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xoA7omHX1aucC3LFX3rgWp
// Component: xL3c_B4MYbFJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Container from "../../Container"; // plasmic-import: yjb-qhVvhQe-/component

import { useScreenVariants as useScreenVariantst0N9QbVX87V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: T0n9qbV-X87V/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant
import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_desktop_ui_theme_css from "../desktop_ui_theme/plasmic.module.css"; // plasmic-import: 6eqm1KNiFrAWEs21Xh4t1D/projectcss
import plasmic_advance_card_css from "../advance_card/plasmic.module.css"; // plasmic-import: 71RGmKESGHwX1FQiVTH6Ch/projectcss
import plasmic_form_input_css from "../form_input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_statistic_css from "../statistic/plasmic.module.css"; // plasmic-import: tq1m84LuCppLaXTJBWMK12/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_container_css from "../container/plasmic.module.css"; // plasmic-import: d9PrY1SRs2wAiwFXTkwPXt/projectcss
import plasmic_switch_css from "../switch/plasmic.module.css"; // plasmic-import: i4n9AbVD4xq7VvHzvrVDh9/projectcss
import plasmic_badge_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_separator_css from "../separator/plasmic.module.css"; // plasmic-import: mGt6E9beS9xM1LmsApto9L/projectcss
import plasmic_form_checkbox_css from "../form_checkbox/plasmic.module.css"; // plasmic-import: bEVQSMSYHutfoPgsCgDaki/projectcss
import plasmic_form_select_css from "../form_select/plasmic.module.css"; // plasmic-import: ivrmEdvdUKbShkHq3Wnmy4/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: xoA7omHX1aucC3LFX3rgWp/projectcss
import sty from "./PlasmicFeaturesSectionFeatures.module.css"; // plasmic-import: xL3c_B4MYbFJ/css

createPlasmicElementProxy;

export type PlasmicFeaturesSectionFeatures__VariantMembers = {};
export type PlasmicFeaturesSectionFeatures__VariantsArgs = {};
type VariantPropType = keyof PlasmicFeaturesSectionFeatures__VariantsArgs;
export const PlasmicFeaturesSectionFeatures__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFeaturesSectionFeatures__ArgsType = {};
type ArgPropType = keyof PlasmicFeaturesSectionFeatures__ArgsType;
export const PlasmicFeaturesSectionFeatures__ArgProps =
  new Array<ArgPropType>();

export type PlasmicFeaturesSectionFeatures__OverridesType = {
  featuresContainer?: Flex__<typeof Container>;
  featuresSection?: Flex__<"div">;
  featuresArea?: Flex__<"div">;
  featureDescriptionStack?: Flex__<"div">;
  h2?: Flex__<"h2">;
  featureGroup?: Flex__<"div">;
};

export interface DefaultFeaturesSectionFeaturesProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFeaturesSectionFeatures__RenderFunc(props: {
  variants: PlasmicFeaturesSectionFeatures__VariantsArgs;
  args: PlasmicFeaturesSectionFeatures__ArgsType;
  overrides: PlasmicFeaturesSectionFeatures__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantst0N9QbVX87V(),
    screen: useScreenVariantsohEUf6Jd0EV8(),
    mode: useMode()
  });

  return (
    <Container
      data-plasmic-name={"featuresContainer"}
      data-plasmic-override={overrides.featuresContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.featuresContainer)}
      containerLayout={[]}
      containerSlot={
        <div
          data-plasmic-name={"featuresSection"}
          data-plasmic-override={overrides.featuresSection}
          className={classNames(projectcss.all, sty.featuresSection)}
        >
          <div
            data-plasmic-name={"featuresArea"}
            data-plasmic-override={overrides.featuresArea}
            className={classNames(projectcss.all, sty.featuresArea)}
          >
            <div
              data-plasmic-name={"featureDescriptionStack"}
              data-plasmic-override={overrides.featureDescriptionStack}
              className={classNames(
                projectcss.all,
                sty.featureDescriptionStack
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j9DKq
                )}
              >
                {"Lorem Ipsum"}
              </div>
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {"Lorem Ipsum"}
              </h2>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jWb2V
                )}
              >
                {
                  "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. "
                }
              </div>
            </div>
            <div
              data-plasmic-name={"featureGroup"}
              data-plasmic-override={overrides.featureGroup}
              className={classNames(projectcss.all, sty.featureGroup)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__dXyxe)}>
                <div className={classNames(projectcss.all, sty.freeBox__pmDca)}>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6___7Q8XW
                    )}
                  >
                    {"Lorem ipsum dolor sit amet, consectetur"}
                  </h6>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__q8XIj)}
                    displayHeight={"auto"}
                    displayMaxHeight={"24px"}
                    displayMaxWidth={"24px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image33.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__u6XVk
                  )}
                >
                  {
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. "
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kAPjw)}>
                <div className={classNames(projectcss.all, sty.freeBox__uf3M2)}>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__z482L
                    )}
                  >
                    {"Lorem ipsum dolor sit amet, consectetur"}
                  </h6>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jXak4)}
                    displayHeight={"auto"}
                    displayMaxHeight={"24px"}
                    displayMaxWidth={"24px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image34.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__xfuf2)}>
                <div className={classNames(projectcss.all, sty.freeBox__sbxZ)}>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6___3RxVs
                    )}
                  >
                    {"Lorem ipsum dolor sit amet, consectetur"}
                  </h6>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__kqkRw)}
                    displayHeight={"auto"}
                    displayMaxHeight={"24px"}
                    displayMaxWidth={"24px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image34.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__don7Q)}>
                <div className={classNames(projectcss.all, sty.freeBox__n0GA0)}>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__rxOxi
                    )}
                  >
                    {"Lorem ipsum dolor sit amet, consectetur"}
                  </h6>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___4YhEy)}
                    displayHeight={"auto"}
                    displayMaxHeight={"24px"}
                    displayMaxWidth={"24px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image34.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ckGqa)}>
                <div className={classNames(projectcss.all, sty.freeBox__h2Bk)}>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__uRcg
                    )}
                  >
                    {"Lorem ipsum dolor sit amet, consectetur"}
                  </h6>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__kYvKo)}
                    displayHeight={"auto"}
                    displayMaxHeight={"24px"}
                    displayMaxWidth={"24px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image34.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      }
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  featuresContainer: [
    "featuresContainer",
    "featuresSection",
    "featuresArea",
    "featureDescriptionStack",
    "h2",
    "featureGroup"
  ],
  featuresSection: [
    "featuresSection",
    "featuresArea",
    "featureDescriptionStack",
    "h2",
    "featureGroup"
  ],
  featuresArea: [
    "featuresArea",
    "featureDescriptionStack",
    "h2",
    "featureGroup"
  ],
  featureDescriptionStack: ["featureDescriptionStack", "h2"],
  h2: ["h2"],
  featureGroup: ["featureGroup"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  featuresContainer: typeof Container;
  featuresSection: "div";
  featuresArea: "div";
  featureDescriptionStack: "div";
  h2: "h2";
  featureGroup: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeaturesSectionFeatures__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeaturesSectionFeatures__VariantsArgs;
    args?: PlasmicFeaturesSectionFeatures__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeaturesSectionFeatures__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFeaturesSectionFeatures__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFeaturesSectionFeatures__ArgProps,
          internalVariantPropNames: PlasmicFeaturesSectionFeatures__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFeaturesSectionFeatures__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "featuresContainer") {
    func.displayName = "PlasmicFeaturesSectionFeatures";
  } else {
    func.displayName = `PlasmicFeaturesSectionFeatures.${nodeName}`;
  }
  return func;
}

export const PlasmicFeaturesSectionFeatures = Object.assign(
  // Top-level PlasmicFeaturesSectionFeatures renders the root element
  makeNodeComponent("featuresContainer"),
  {
    // Helper components rendering sub-elements
    featuresSection: makeNodeComponent("featuresSection"),
    featuresArea: makeNodeComponent("featuresArea"),
    featureDescriptionStack: makeNodeComponent("featureDescriptionStack"),
    h2: makeNodeComponent("h2"),
    featureGroup: makeNodeComponent("featureGroup"),

    // Metadata about props expected for PlasmicFeaturesSectionFeatures
    internalVariantProps: PlasmicFeaturesSectionFeatures__VariantProps,
    internalArgProps: PlasmicFeaturesSectionFeatures__ArgProps
  }
);

export default PlasmicFeaturesSectionFeatures;
/* prettier-ignore-end */

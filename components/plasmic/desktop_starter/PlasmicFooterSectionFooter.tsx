// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xoA7omHX1aucC3LFX3rgWp
// Component: VS9THT0wvN1q

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Container from "../../Container"; // plasmic-import: yjb-qhVvhQe-/component
import Button from "../../Button"; // plasmic-import: 3AR6h0473ToW/component
import Input from "../../Input"; // plasmic-import: G_6Yw3j04Kjy/component

import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant
import { ThemeValue, useTheme } from "../core/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_desktop_ui_theme_css from "../desktop_ui_theme/plasmic.module.css"; // plasmic-import: 6eqm1KNiFrAWEs21Xh4t1D/projectcss
import plasmic_advance_card_css from "../advance_card/plasmic.module.css"; // plasmic-import: 71RGmKESGHwX1FQiVTH6Ch/projectcss
import plasmic_form_input_css from "../form_input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_statistic_css from "../statistic/plasmic.module.css"; // plasmic-import: tq1m84LuCppLaXTJBWMK12/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_container_css from "../container/plasmic.module.css"; // plasmic-import: d9PrY1SRs2wAiwFXTkwPXt/projectcss
import plasmic_switch_css from "../switch/plasmic.module.css"; // plasmic-import: i4n9AbVD4xq7VvHzvrVDh9/projectcss
import plasmic_label_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_separator_css from "../separator/plasmic.module.css"; // plasmic-import: mGt6E9beS9xM1LmsApto9L/projectcss
import plasmic_form_checkbox_css from "../form_checkbox/plasmic.module.css"; // plasmic-import: bEVQSMSYHutfoPgsCgDaki/projectcss
import plasmic_form_select_css from "../form_select/plasmic.module.css"; // plasmic-import: ivrmEdvdUKbShkHq3Wnmy4/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: xoA7omHX1aucC3LFX3rgWp/projectcss
import sty from "./PlasmicFooterSectionFooter.module.css"; // plasmic-import: VS9THT0wvN1q/css

import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: KhoCLeC8j1Wa/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: t4Q_Ji23WBva/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: 747FuZy43vEN/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: 6ENAkEvUgq-u/icon
import FaArrowRightSvgIcon from "../icons/icons/PlasmicIcon__FaArrowRightsvg"; // plasmic-import: laMKK4I5P9un/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: ncbGhhPH29HJ/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: ra_xVl5-KB_J/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 1l0k0f8No_g4/icon

createPlasmicElementProxy;

export type PlasmicFooterSectionFooter__VariantMembers = {};
export type PlasmicFooterSectionFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooterSectionFooter__VariantsArgs;
export const PlasmicFooterSectionFooter__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFooterSectionFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooterSectionFooter__ArgsType;
export const PlasmicFooterSectionFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooterSectionFooter__OverridesType = {
  footerContainer?: Flex__<typeof Container>;
  img?: Flex__<typeof PlasmicImg__>;
  input2?: Flex__<typeof Input>;
};

export interface DefaultFooterSectionFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooterSectionFooter__RenderFunc(props: {
  variants: PlasmicFooterSectionFooter__VariantsArgs;
  args: PlasmicFooterSectionFooter__ArgsType;
  overrides: PlasmicFooterSectionFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsohEUf6Jd0EV8(),
    theme: useTheme()
  });

  return (
    <Container
      data-plasmic-name={"footerContainer"}
      data-plasmic-override={overrides.footerContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.footerContainer)}
      containerSlot={
        <React.Fragment>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__olpYh)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__qNmPc)}>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"35px"}
                displayMaxWidth={"229px"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/desktop_starter/images/image36.png",
                  fullWidth: 458,
                  fullHeight: 70,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__c8Aj
                )}
              >
                {
                  "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__mWFnn)}>
                <Icon5Icon
                  className={classNames(projectcss.all, sty.svg___0IllO)}
                  role={"img"}
                />

                <Icon6Icon
                  className={classNames(projectcss.all, sty.svg__wCxyn)}
                  role={"img"}
                />

                <Icon7Icon
                  className={classNames(projectcss.all, sty.svg__gzIcg)}
                  role={"img"}
                />

                <Icon8Icon
                  className={classNames(projectcss.all, sty.svg__pg1CK)}
                  role={"img"}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___8Lkpf)}>
              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__wCyaX
                )}
              >
                {"Menu"}
              </h6>
              <Button
                anatomy={["ghost"]}
                className={classNames("__wab_instance", sty.button__j55Kc)}
                endIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg___44LG)}
                    role={"img"}
                  />
                }
                startIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__q3Bmk)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nPj8P
                  )}
                >
                  {"How it work"}
                </div>
              </Button>
              <Button
                anatomy={["ghost"]}
                className={classNames("__wab_instance", sty.button__n4L8R)}
                endIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__aHfdv)}
                    role={"img"}
                  />
                }
                startIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__ipSLi)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___65V8F
                  )}
                >
                  {"Pricing"}
                </div>
              </Button>
              <Button
                anatomy={["ghost"]}
                className={classNames("__wab_instance", sty.button__yQhRp)}
                endIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__acKtf)}
                    role={"img"}
                  />
                }
                startIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__cXf3N)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fb01G
                  )}
                >
                  {"FAQs"}
                </div>
              </Button>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__agDao)}>
              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__n7Ht3
                )}
              >
                {"Help"}
              </h6>
              <Button
                anatomy={["ghost"]}
                className={classNames("__wab_instance", sty.button___3P4BK)}
                endIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__r3ZOp)}
                    role={"img"}
                  />
                }
                startIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__sd4Mj)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fucCq
                  )}
                >
                  {"Privacy and Policy"}
                </div>
              </Button>
              <Button
                anatomy={["ghost"]}
                className={classNames("__wab_instance", sty.button__e5TvB)}
                endIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__ie75A)}
                    role={"img"}
                  />
                }
                startIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__wjo5D)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qL
                  )}
                >
                  {"Terms of Use"}
                </div>
              </Button>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__feXue)}>
              <h6
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.h6__sxF0Z
                )}
              >
                {"Company"}
              </h6>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jap4A
                )}
              >
                {"Lorem ipsum dolor sit amet, consectetur."}
              </div>
              <Input
                data-plasmic-name={"input2"}
                data-plasmic-override={overrides.input2}
                className={classNames("__wab_instance", sty.input2)}
                endIcon={
                  <Icon4Icon
                    className={classNames(projectcss.all, sty.svg__mJ7Fo)}
                    role={"img"}
                  />
                }
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["input2", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                startIcon={
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__cD)}
                    role={"img"}
                  />
                }
                value={
                  generateStateValueProp($state, ["input2", "value"]) ?? ""
                }
              />

              <Button
                anatomy={[]}
                className={classNames("__wab_instance", sty.button__zv7O)}
                endIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg___6SvxX)}
                    role={"img"}
                  />
                }
                startIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg___6Ozt)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__m4YIt
                  )}
                >
                  {"Subscribe"}
                </div>
              </Button>
            </div>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__ztHes)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xGoi
              )}
            >
              {"Copyrights \u00a9 2022 All Rights Reserved by PlasmicApp"}
            </div>
          </div>
        </React.Fragment>
      }
      layer01={["backgroundBold"]}
      overlayPadding={["all3Xl", "bottomSm"]}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footerContainer: ["footerContainer", "img", "input2"],
  img: ["img"],
  input2: ["input2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  footerContainer: typeof Container;
  img: typeof PlasmicImg__;
  input2: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterSectionFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterSectionFooter__VariantsArgs;
    args?: PlasmicFooterSectionFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooterSectionFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooterSectionFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooterSectionFooter__ArgProps,
          internalVariantPropNames: PlasmicFooterSectionFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooterSectionFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footerContainer") {
    func.displayName = "PlasmicFooterSectionFooter";
  } else {
    func.displayName = `PlasmicFooterSectionFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterSectionFooter = Object.assign(
  // Top-level PlasmicFooterSectionFooter renders the root element
  makeNodeComponent("footerContainer"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    input2: makeNodeComponent("input2"),

    // Metadata about props expected for PlasmicFooterSectionFooter
    internalVariantProps: PlasmicFooterSectionFooter__VariantProps,
    internalArgProps: PlasmicFooterSectionFooter__ArgProps
  }
);

export default PlasmicFooterSectionFooter;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xoA7omHX1aucC3LFX3rgWp
// Component: oRIHpDY8-rTC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Container from "../../Container"; // plasmic-import: yjb-qhVvhQe-/component
import Button from "../../Button"; // plasmic-import: 3AR6h0473ToW/component

import { ThemeValue, useTheme } from "../core/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_desktop_ui_theme_css from "../desktop_ui_theme/plasmic.module.css"; // plasmic-import: 6eqm1KNiFrAWEs21Xh4t1D/projectcss
import plasmic_advance_card_css from "../advance_card/plasmic.module.css"; // plasmic-import: 71RGmKESGHwX1FQiVTH6Ch/projectcss
import plasmic_form_input_css from "../form_input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_statistic_css from "../statistic/plasmic.module.css"; // plasmic-import: tq1m84LuCppLaXTJBWMK12/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_container_css from "../container/plasmic.module.css"; // plasmic-import: d9PrY1SRs2wAiwFXTkwPXt/projectcss
import plasmic_switch_css from "../switch/plasmic.module.css"; // plasmic-import: i4n9AbVD4xq7VvHzvrVDh9/projectcss
import plasmic_label_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_separator_css from "../separator/plasmic.module.css"; // plasmic-import: mGt6E9beS9xM1LmsApto9L/projectcss
import plasmic_form_checkbox_css from "../form_checkbox/plasmic.module.css"; // plasmic-import: bEVQSMSYHutfoPgsCgDaki/projectcss
import plasmic_form_select_css from "../form_select/plasmic.module.css"; // plasmic-import: ivrmEdvdUKbShkHq3Wnmy4/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: xoA7omHX1aucC3LFX3rgWp/projectcss
import sty from "./PlasmicHeroSectionHero.module.css"; // plasmic-import: oRIHpDY8-rTC/css

import FaArrowRightSvgIcon from "../icons/icons/PlasmicIcon__FaArrowRightsvg"; // plasmic-import: laMKK4I5P9un/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 1l0k0f8No_g4/icon

createPlasmicElementProxy;

export type PlasmicHeroSectionHero__VariantMembers = {};
export type PlasmicHeroSectionHero__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeroSectionHero__VariantsArgs;
export const PlasmicHeroSectionHero__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHeroSectionHero__ArgsType = {};
type ArgPropType = keyof PlasmicHeroSectionHero__ArgsType;
export const PlasmicHeroSectionHero__ArgProps = new Array<ArgPropType>();

export type PlasmicHeroSectionHero__OverridesType = {
  heroContainer?: Flex__<typeof Container>;
  navBarSection?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  img?: Flex__<typeof PlasmicImg__>;
  heroHeaderSection?: Flex__<"div">;
  heroArea?: Flex__<"div">;
  h1?: Flex__<"h1">;
};

export interface DefaultHeroSectionHeroProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeroSectionHero__RenderFunc(props: {
  variants: PlasmicHeroSectionHero__VariantsArgs;
  args: PlasmicHeroSectionHero__ArgsType;
  overrides: PlasmicHeroSectionHero__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Container
      data-plasmic-name={"heroContainer"}
      data-plasmic-override={overrides.heroContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      backgroundColor={"mainSubtle"}
      className={classNames("__wab_instance", sty.heroContainer)}
      containerLayout={["heightStretch"]}
      containerSlot={
        <React.Fragment>
          <Stack__
            as={"div"}
            data-plasmic-name={"navBarSection"}
            data-plasmic-override={overrides.navBarSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.navBarSection)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bcpxM)}
            >
              <PlasmicLink__
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(projectcss.all, projectcss.a, sty.link)}
                component={Link}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={{
                    src: "/plasmic/desktop_starter/images/image2.svg",
                    fullWidth: 300,
                    fullHeight: 61,
                    aspectRatio: 4.92
                  }}
                />
              </PlasmicLink__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hKxrs)}
              >
                <Button
                  anatomy={["ghost"]}
                  className={classNames("__wab_instance", sty.button__pfW5B)}
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__m55Df)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__ok2E)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___882OR
                    )}
                  >
                    {"How it Work"}
                  </div>
                </Button>
                <Button
                  anatomy={["ghost"]}
                  className={classNames("__wab_instance", sty.button__jvnRj)}
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__olXnK)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__jx3Qz)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bkNAl
                    )}
                  >
                    {"Pricing"}
                  </div>
                </Button>
                <Button
                  anatomy={["ghost"]}
                  className={classNames("__wab_instance", sty.button__eVyZz)}
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__q8Rce)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg___6XCeX)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Gzlk
                    )}
                  >
                    {"FAQs"}
                  </div>
                </Button>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__mKb0L)}>
                <Button
                  className={classNames("__wab_instance", sty.button__h9ZnE)}
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__a3Lil)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__dvnXk)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lNtLt
                    )}
                  >
                    {"Log in"}
                  </div>
                </Button>
                <Button
                  background={"primary"}
                  className={classNames("__wab_instance", sty.button__hHxhq)}
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__awhRu)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__fpQxi)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fycDr
                    )}
                  >
                    {"Watch Demo"}
                  </div>
                </Button>
              </div>
            </Stack__>
          </Stack__>
          <div
            data-plasmic-name={"heroHeaderSection"}
            data-plasmic-override={overrides.heroHeaderSection}
            className={classNames(projectcss.all, sty.heroHeaderSection)}
          >
            <div
              data-plasmic-name={"heroArea"}
              data-plasmic-override={overrides.heroArea}
              className={classNames(projectcss.all, sty.heroArea)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Welcome to the new technology of the future."}
              </h1>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cnT5G
                )}
              >
                {
                  "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
                }
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wwe20)}
              >
                <Button
                  anatomy={["solid"]}
                  background={"primary"}
                  className={classNames("__wab_instance", sty.button__hn1Ck)}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__lp9E)}
                      role={"img"}
                    />
                  }
                  showEndIcon={true}
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__ytq23)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wstBn
                    )}
                  >
                    {"Try demo for free"}
                  </div>
                </Button>
                <Button
                  anatomy={["outlined"]}
                  className={classNames("__wab_instance", sty.button__ofD8O)}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__y3Y8E)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg___7BmTo)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mcCAy
                    )}
                  >
                    {"Learn More"}
                  </div>
                </Button>
              </Stack__>
            </div>
          </div>
        </React.Fragment>
      }
      contentGap={"_3Xl"}
      contentLayout={["horizontalCenter", "widthStretch"]}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  heroContainer: [
    "heroContainer",
    "navBarSection",
    "link",
    "img",
    "heroHeaderSection",
    "heroArea",
    "h1"
  ],
  navBarSection: ["navBarSection", "link", "img"],
  link: ["link", "img"],
  img: ["img"],
  heroHeaderSection: ["heroHeaderSection", "heroArea", "h1"],
  heroArea: ["heroArea", "h1"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  heroContainer: typeof Container;
  navBarSection: "div";
  link: "a";
  img: typeof PlasmicImg__;
  heroHeaderSection: "div";
  heroArea: "div";
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroSectionHero__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroSectionHero__VariantsArgs;
    args?: PlasmicHeroSectionHero__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeroSectionHero__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeroSectionHero__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeroSectionHero__ArgProps,
          internalVariantPropNames: PlasmicHeroSectionHero__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeroSectionHero__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "heroContainer") {
    func.displayName = "PlasmicHeroSectionHero";
  } else {
    func.displayName = `PlasmicHeroSectionHero.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroSectionHero = Object.assign(
  // Top-level PlasmicHeroSectionHero renders the root element
  makeNodeComponent("heroContainer"),
  {
    // Helper components rendering sub-elements
    navBarSection: makeNodeComponent("navBarSection"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    heroHeaderSection: makeNodeComponent("heroHeaderSection"),
    heroArea: makeNodeComponent("heroArea"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicHeroSectionHero
    internalVariantProps: PlasmicHeroSectionHero__VariantProps,
    internalArgProps: PlasmicHeroSectionHero__ArgProps
  }
);

export default PlasmicHeroSectionHero;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xoA7omHX1aucC3LFX3rgWp
// Component: VDTU6YnTXwYm

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Container from "../../Container"; // plasmic-import: yjb-qhVvhQe-/component
import Separator from "../../Separator"; // plasmic-import: wFvP5YvdrI9K/component
import Button from "../../Button"; // plasmic-import: 3AR6h0473ToW/component

import { ThemeValue, useTheme } from "../core/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_desktop_ui_theme_css from "../desktop_ui_theme/plasmic.module.css"; // plasmic-import: 6eqm1KNiFrAWEs21Xh4t1D/projectcss
import plasmic_advance_card_css from "../advance_card/plasmic.module.css"; // plasmic-import: 71RGmKESGHwX1FQiVTH6Ch/projectcss
import plasmic_form_input_css from "../form_input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_statistic_css from "../statistic/plasmic.module.css"; // plasmic-import: tq1m84LuCppLaXTJBWMK12/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_container_css from "../container/plasmic.module.css"; // plasmic-import: d9PrY1SRs2wAiwFXTkwPXt/projectcss
import plasmic_switch_css from "../switch/plasmic.module.css"; // plasmic-import: i4n9AbVD4xq7VvHzvrVDh9/projectcss
import plasmic_label_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_separator_css from "../separator/plasmic.module.css"; // plasmic-import: mGt6E9beS9xM1LmsApto9L/projectcss
import plasmic_form_checkbox_css from "../form_checkbox/plasmic.module.css"; // plasmic-import: bEVQSMSYHutfoPgsCgDaki/projectcss
import plasmic_form_select_css from "../form_select/plasmic.module.css"; // plasmic-import: ivrmEdvdUKbShkHq3Wnmy4/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: xoA7omHX1aucC3LFX3rgWp/projectcss
import sty from "./PlasmicPricingComponentPricingItem.module.css"; // plasmic-import: VDTU6YnTXwYm/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 1l0k0f8No_g4/icon
import FaArrowRightSvgIcon from "../icons/icons/PlasmicIcon__FaArrowRightsvg"; // plasmic-import: laMKK4I5P9un/icon

createPlasmicElementProxy;

export type PlasmicPricingComponentPricingItem__VariantMembers = {
  advert: "typical" | "special";
};
export type PlasmicPricingComponentPricingItem__VariantsArgs = {
  advert?: SingleChoiceArg<"typical" | "special">;
};
type VariantPropType = keyof PlasmicPricingComponentPricingItem__VariantsArgs;
export const PlasmicPricingComponentPricingItem__VariantProps =
  new Array<VariantPropType>("advert");

export type PlasmicPricingComponentPricingItem__ArgsType = {};
type ArgPropType = keyof PlasmicPricingComponentPricingItem__ArgsType;
export const PlasmicPricingComponentPricingItem__ArgProps =
  new Array<ArgPropType>();

export type PlasmicPricingComponentPricingItem__OverridesType = {
  root?: Flex__<"div">;
  pricingItem?: Flex__<"div">;
  h4?: Flex__<"h4">;
  h3?: Flex__<"h3">;
  button?: Flex__<typeof Button>;
};

export interface DefaultPricingComponentPricingItemProps {
  advert?: SingleChoiceArg<"typical" | "special">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPricingComponentPricingItem__RenderFunc(props: {
  variants: PlasmicPricingComponentPricingItem__VariantsArgs;
  args: PlasmicPricingComponentPricingItem__ArgsType;
  overrides: PlasmicPricingComponentPricingItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "advert",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.advert
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_desktop_ui_theme_css.plasmic_tokens,
        plasmic_advance_card_css.plasmic_tokens,
        plasmic_form_input_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        plasmic_statistic_css.plasmic_tokens,
        plasmic_avatar_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        plasmic_image_css.plasmic_tokens,
        plasmic_container_css.plasmic_tokens,
        plasmic_switch_css.plasmic_tokens,
        plasmic_label_css.plasmic_tokens,
        plasmic_menu_item_css.plasmic_tokens,
        plasmic_separator_css.plasmic_tokens,
        plasmic_form_checkbox_css.plasmic_tokens,
        plasmic_form_select_css.plasmic_tokens,
        plasmic_list_item_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_core_css.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [plasmic_core_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_core_css.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          ),
          [sty.rootadvert_special]: hasVariant($state, "advert", "special"),
          [sty.rootadvert_typical]: hasVariant($state, "advert", "typical")
        }
      )}
    >
      <Container
        backgroundColor={
          hasVariant($state, "advert", "special") ? "mainBold" : undefined
        }
        className={classNames("__wab_instance", sty.container___1DOy3, {
          [sty.containeradvert_special___1DOy3Fhyw8]: hasVariant(
            $state,
            "advert",
            "special"
          )
        })}
        containerPadding={
          hasVariant($state, "advert", "special") ? "allXs" : undefined
        }
        containerSlot={
          <div className={classNames(projectcss.all, sty.freeBox___0SQyb)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lBmMu,
                {
                  [sty.textadvert_special__lBmMufhyw8]: hasVariant(
                    $state,
                    "advert",
                    "special"
                  )
                }
              )}
            >
              {"Our Recommendation"}
            </div>
            <Container
              backgroundColor={"ancillarySubtle"}
              borderColor={"mainEmphasis"}
              borderStyle={["_2Px"]}
              className={classNames("__wab_instance", sty.container__dsUNh)}
              containerSlot={
                <div
                  data-plasmic-name={"pricingItem"}
                  data-plasmic-override={overrides.pricingItem}
                  className={classNames(projectcss.all, sty.pricingItem)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__obmlp)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"141px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image29.svg",
                      fullWidth: 148,
                      fullHeight: 150,
                      aspectRatio: 0.986014
                    }}
                  />

                  <h4
                    data-plasmic-name={"h4"}
                    data-plasmic-override={overrides.h4}
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4
                    )}
                  >
                    {"Starter"}
                  </h4>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0YKkc
                    )}
                  >
                    {"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}
                  </div>
                  <Separator
                    className={classNames(
                      "__wab_instance",
                      sty.separator__rqvvZ
                    )}
                    length={"_75"}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__vfve)}
                  >
                    <h3
                      data-plasmic-name={"h3"}
                      data-plasmic-override={overrides.h3}
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3
                      )}
                    >
                      {"$0"}
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5RDrC
                      )}
                    >
                      {" / Month"}
                    </div>
                  </div>
                  <Separator
                    className={classNames(
                      "__wab_instance",
                      sty.separator__jfXxx
                    )}
                    length={"_75"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__l98T7
                    )}
                  >
                    {"Feature"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qBo1R)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ffulq)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___18YO
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___88HaU)}
                          displayHeight={"20px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"20px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/desktop_starter/images/image30.svg",
                            fullWidth: 150,
                            fullHeight: 150,
                            aspectRatio: 1
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zKMu
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ck5Eh
                          )}
                        >
                          {"Unlimited issue"}
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vjdUq)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uPbDe
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___1Scu9)}
                          displayHeight={"20px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"20px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/desktop_starter/images/image30.svg",
                            fullWidth: 150,
                            fullHeight: 150,
                            aspectRatio: 1
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ydMHu
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qFvEi
                          )}
                        >
                          {"Free domain"}
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1Sc68
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gKa3P
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__guh0R)}
                          displayHeight={"20px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"20px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/desktop_starter/images/image30.svg",
                            fullWidth: 150,
                            fullHeight: 150,
                            aspectRatio: 1
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8XlXf
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rak7C
                          )}
                        >
                          {"3 team accounts"}
                        </div>
                      </div>
                    </div>
                  </div>
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    background={"primary"}
                    className={classNames("__wab_instance", sty.button)}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__pLfDw)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__wi00B)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iaTNr
                      )}
                    >
                      {"Get Started"}
                    </div>
                  </Button>
                </div>
              }
              layer02={["backgroundUniversal"]}
              radius={"extraLarge"}
            />
          </div>
        }
        radius={
          hasVariant($state, "advert", "special") ? "extraLarge" : undefined
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pricingItem", "h4", "h3", "button"],
  pricingItem: ["pricingItem", "h4", "h3", "button"],
  h4: ["h4"],
  h3: ["h3"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pricingItem: "div";
  h4: "h4";
  h3: "h3";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPricingComponentPricingItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPricingComponentPricingItem__VariantsArgs;
    args?: PlasmicPricingComponentPricingItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicPricingComponentPricingItem__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicPricingComponentPricingItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPricingComponentPricingItem__ArgProps,
          internalVariantPropNames:
            PlasmicPricingComponentPricingItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPricingComponentPricingItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricingComponentPricingItem";
  } else {
    func.displayName = `PlasmicPricingComponentPricingItem.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingComponentPricingItem = Object.assign(
  // Top-level PlasmicPricingComponentPricingItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pricingItem: makeNodeComponent("pricingItem"),
    h4: makeNodeComponent("h4"),
    h3: makeNodeComponent("h3"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicPricingComponentPricingItem
    internalVariantProps: PlasmicPricingComponentPricingItem__VariantProps,
    internalArgProps: PlasmicPricingComponentPricingItem__ArgProps
  }
);

export default PlasmicPricingComponentPricingItem;
/* prettier-ignore-end */

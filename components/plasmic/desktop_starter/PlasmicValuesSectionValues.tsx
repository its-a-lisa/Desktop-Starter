// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xoA7omHX1aucC3LFX3rgWp
// Component: NSHccciyxRK_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Container from "../../Container"; // plasmic-import: yjb-qhVvhQe-/component
import Button from "../../Button"; // plasmic-import: 3AR6h0473ToW/component

import { useScreenVariants as useScreenVariantst0N9QbVX87V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: T0n9qbV-X87V/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant
import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_desktop_ui_theme_css from "../desktop_ui_theme/plasmic.module.css"; // plasmic-import: 6eqm1KNiFrAWEs21Xh4t1D/projectcss
import plasmic_advance_card_css from "../advance_card/plasmic.module.css"; // plasmic-import: 71RGmKESGHwX1FQiVTH6Ch/projectcss
import plasmic_form_input_css from "../form_input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_statistic_css from "../statistic/plasmic.module.css"; // plasmic-import: tq1m84LuCppLaXTJBWMK12/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_container_css from "../container/plasmic.module.css"; // plasmic-import: d9PrY1SRs2wAiwFXTkwPXt/projectcss
import plasmic_switch_css from "../switch/plasmic.module.css"; // plasmic-import: i4n9AbVD4xq7VvHzvrVDh9/projectcss
import plasmic_badge_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_separator_css from "../separator/plasmic.module.css"; // plasmic-import: mGt6E9beS9xM1LmsApto9L/projectcss
import plasmic_form_checkbox_css from "../form_checkbox/plasmic.module.css"; // plasmic-import: bEVQSMSYHutfoPgsCgDaki/projectcss
import plasmic_form_select_css from "../form_select/plasmic.module.css"; // plasmic-import: ivrmEdvdUKbShkHq3Wnmy4/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: xoA7omHX1aucC3LFX3rgWp/projectcss
import sty from "./PlasmicValuesSectionValues.module.css"; // plasmic-import: NSHccciyxRK_/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 1l0k0f8No_g4/icon
import FaArrowRightsvgIcon from "../icons/icons/PlasmicIcon__FaArrowRightsvg"; // plasmic-import: laMKK4I5P9un/icon

createPlasmicElementProxy;

export type PlasmicValuesSectionValues__VariantMembers = {};
export type PlasmicValuesSectionValues__VariantsArgs = {};
type VariantPropType = keyof PlasmicValuesSectionValues__VariantsArgs;
export const PlasmicValuesSectionValues__VariantProps =
  new Array<VariantPropType>();

export type PlasmicValuesSectionValues__ArgsType = {};
type ArgPropType = keyof PlasmicValuesSectionValues__ArgsType;
export const PlasmicValuesSectionValues__ArgProps = new Array<ArgPropType>();

export type PlasmicValuesSectionValues__OverridesType = {
  valuesContainer?: Flex__<typeof Container>;
  valuesSection?: Flex__<"div">;
  valuesArea?: Flex__<"div">;
  h2?: Flex__<"h2">;
  valuesGroup?: Flex__<"div">;
  valuesRow1?: Flex__<"div">;
  valuesRow2?: Flex__<"div">;
  valuesRow3?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultValuesSectionValuesProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicValuesSectionValues__RenderFunc(props: {
  variants: PlasmicValuesSectionValues__VariantsArgs;
  args: PlasmicValuesSectionValues__ArgsType;
  overrides: PlasmicValuesSectionValues__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantst0N9QbVX87V(),
    screen: useScreenVariantsohEUf6Jd0EV8(),
    mode: useMode()
  });

  return (
    <Container
      data-plasmic-name={"valuesContainer"}
      data-plasmic-override={overrides.valuesContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.valuesContainer)}
      containerLayout={["heightHug"]}
      containerSlot={
        <div
          data-plasmic-name={"valuesSection"}
          data-plasmic-override={overrides.valuesSection}
          className={classNames(projectcss.all, sty.valuesSection)}
        >
          <div
            data-plasmic-name={"valuesArea"}
            data-plasmic-override={overrides.valuesArea}
            className={classNames(projectcss.all, sty.valuesArea)}
          >
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              {"Lorem Ipsum"}
            </h2>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__udDnf
              )}
            >
              {
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"
              }
            </div>
            <div
              data-plasmic-name={"valuesGroup"}
              data-plasmic-override={overrides.valuesGroup}
              className={classNames(projectcss.all, sty.valuesGroup)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"valuesRow1"}
                data-plasmic-override={overrides.valuesRow1}
                hasGap={true}
                className={classNames(projectcss.all, sty.valuesRow1)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__os6Wi)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__eQVvq)}
                    displayHeight={"24px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"24px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image8.svg",
                      fullWidth: 144,
                      fullHeight: 150,
                      aspectRatio: 0.96
                    }}
                  />

                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__ni3Pk
                    )}
                  >
                    {"Newsletters"}
                  </h5>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__iif0B)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__vByf)}
                    displayHeight={"24px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"24px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image9.svg",
                      fullWidth: 144,
                      fullHeight: 150,
                      aspectRatio: 0.96
                    }}
                  />

                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__eeeQp
                    )}
                  >
                    {"Messaging"}
                  </h5>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__jaT)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__an04D)}
                    displayHeight={"24px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"24px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image10.svg",
                      fullWidth: 144,
                      fullHeight: 150,
                      aspectRatio: 0.96
                    }}
                  />

                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__oxDKz
                    )}
                  >
                    {"Dashboard"}
                  </h5>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__mNt0I)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__brp0U)}
                    displayHeight={"24px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"24px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image11.svg",
                      fullWidth: 144,
                      fullHeight: 150,
                      aspectRatio: 0.96
                    }}
                  />

                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__hyyTj
                    )}
                  >
                    {"Automations"}
                  </h5>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"valuesRow2"}
                data-plasmic-override={overrides.valuesRow2}
                hasGap={true}
                className={classNames(projectcss.all, sty.valuesRow2)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__rck5X)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___1Aod4)}
                    displayHeight={"24px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"24px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image12.svg",
                      fullWidth: 144,
                      fullHeight: 150,
                      aspectRatio: 0.96
                    }}
                  />

                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__ppFd7
                    )}
                  >
                    {"Modals"}
                  </h5>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__lOYjM)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__zroTz)}
                    displayHeight={"24px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"24px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image13.svg",
                      fullWidth: 144,
                      fullHeight: 150,
                      aspectRatio: 0.96
                    }}
                  />

                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__xHeMq
                    )}
                  >
                    {"User Flow"}
                  </h5>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4UVfF)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__wNcky)}
                    displayHeight={"24px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"24px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image14.svg",
                      fullWidth: 144,
                      fullHeight: 150,
                      aspectRatio: 0.96
                    }}
                  />

                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__rwQZo
                    )}
                  >
                    {"Security"}
                  </h5>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"valuesRow3"}
                data-plasmic-override={overrides.valuesRow3}
                hasGap={true}
                className={classNames(projectcss.all, sty.valuesRow3)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__afuMp)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___6FR6F)}
                    displayHeight={"24px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"24px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image15.svg",
                      fullWidth: 144,
                      fullHeight: 150,
                      aspectRatio: 0.96
                    }}
                  />

                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5___1AYog
                    )}
                  >
                    {"Archive"}
                  </h5>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__heMe)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__vqVek)}
                    displayHeight={"24px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"24px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image16.svg",
                      fullWidth: 144,
                      fullHeight: 150,
                      aspectRatio: 0.96
                    }}
                  />

                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__eLbjy
                    )}
                  >
                    {"Analytics"}
                  </h5>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__aMx3Y)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__s2HgZ)}
                    displayHeight={"24px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"24px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image17.svg",
                      fullWidth: 144,
                      fullHeight: 150,
                      aspectRatio: 0.96
                    }}
                  />

                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__w65Mh
                    )}
                  >
                    {"Search"}
                  </h5>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ohLi)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___7DuBr)}
                    displayHeight={"24px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"24px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/desktop_starter/images/image18.svg",
                      fullWidth: 144,
                      fullHeight: 150,
                      aspectRatio: 0.96
                    }}
                  />

                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__oc6Jb
                    )}
                  >
                    {"Protection"}
                  </h5>
                </div>
              </Stack__>
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                anatomy={["ghost"]}
                className={classNames("__wab_instance", sty.button)}
                endIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__ulClW)}
                    role={"img"}
                  />
                }
                startIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__nJPan)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uerRi
                  )}
                >
                  {"Show all feature"}
                </div>
              </Button>
            </div>
          </div>
        </div>
      }
      contentLayout={["widthStretch", "heightHug"]}
      layer01={["backgroundUniversal"]}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  valuesContainer: [
    "valuesContainer",
    "valuesSection",
    "valuesArea",
    "h2",
    "valuesGroup",
    "valuesRow1",
    "valuesRow2",
    "valuesRow3",
    "button"
  ],
  valuesSection: [
    "valuesSection",
    "valuesArea",
    "h2",
    "valuesGroup",
    "valuesRow1",
    "valuesRow2",
    "valuesRow3",
    "button"
  ],
  valuesArea: [
    "valuesArea",
    "h2",
    "valuesGroup",
    "valuesRow1",
    "valuesRow2",
    "valuesRow3",
    "button"
  ],
  h2: ["h2"],
  valuesGroup: [
    "valuesGroup",
    "valuesRow1",
    "valuesRow2",
    "valuesRow3",
    "button"
  ],
  valuesRow1: ["valuesRow1"],
  valuesRow2: ["valuesRow2"],
  valuesRow3: ["valuesRow3"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  valuesContainer: typeof Container;
  valuesSection: "div";
  valuesArea: "div";
  h2: "h2";
  valuesGroup: "div";
  valuesRow1: "div";
  valuesRow2: "div";
  valuesRow3: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicValuesSectionValues__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicValuesSectionValues__VariantsArgs;
    args?: PlasmicValuesSectionValues__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicValuesSectionValues__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicValuesSectionValues__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicValuesSectionValues__ArgProps,
          internalVariantPropNames: PlasmicValuesSectionValues__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicValuesSectionValues__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "valuesContainer") {
    func.displayName = "PlasmicValuesSectionValues";
  } else {
    func.displayName = `PlasmicValuesSectionValues.${nodeName}`;
  }
  return func;
}

export const PlasmicValuesSectionValues = Object.assign(
  // Top-level PlasmicValuesSectionValues renders the root element
  makeNodeComponent("valuesContainer"),
  {
    // Helper components rendering sub-elements
    valuesSection: makeNodeComponent("valuesSection"),
    valuesArea: makeNodeComponent("valuesArea"),
    h2: makeNodeComponent("h2"),
    valuesGroup: makeNodeComponent("valuesGroup"),
    valuesRow1: makeNodeComponent("valuesRow1"),
    valuesRow2: makeNodeComponent("valuesRow2"),
    valuesRow3: makeNodeComponent("valuesRow3"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicValuesSectionValues
    internalVariantProps: PlasmicValuesSectionValues__VariantProps,
    internalArgProps: PlasmicValuesSectionValues__ArgProps
  }
);

export default PlasmicValuesSectionValues;
/* prettier-ignore-end */

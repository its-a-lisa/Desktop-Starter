// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6eqm1KNiFrAWEs21Xh4t1D
// Component: 3AR6h0473ToW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import * as pp from "@plasmicapp/react-web";

import { ThemeValue, useTheme } from "../core/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_switch_css from "../switch/plasmic.module.css"; // plasmic-import: i4n9AbVD4xq7VvHzvrVDh9/projectcss
import plasmic_label_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_form_input_css from "../form_input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_separator_css from "../separator/plasmic.module.css"; // plasmic-import: mGt6E9beS9xM1LmsApto9L/projectcss
import plasmic_form_checkbox_css from "../form_checkbox/plasmic.module.css"; // plasmic-import: bEVQSMSYHutfoPgsCgDaki/projectcss
import plasmic_form_select_css from "../form_select/plasmic.module.css"; // plasmic-import: ivrmEdvdUKbShkHq3Wnmy4/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import plasmic_advance_card_css from "../advance_card/plasmic.module.css"; // plasmic-import: 71RGmKESGHwX1FQiVTH6Ch/projectcss
import plasmic_statistic_css from "../statistic/plasmic.module.css"; // plasmic-import: tq1m84LuCppLaXTJBWMK12/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_container_css from "../container/plasmic.module.css"; // plasmic-import: d9PrY1SRs2wAiwFXTkwPXt/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6eqm1KNiFrAWEs21Xh4t1D/projectcss
import sty from "./PlasmicButton.module.css"; // plasmic-import: 3AR6h0473ToW/css

import FaCheckSvgIcon from "../icons/icons/PlasmicIcon__FaChecksvg"; // plasmic-import: 0ji8kkpc0bva/icon
import FaArrowRightSvgIcon from "../icons/icons/PlasmicIcon__FaArrowRightsvg"; // plasmic-import: laMKK4I5P9un/icon

createPlasmicElementProxy;

export type PlasmicButton__VariantMembers = {
  anatomy: "solid" | "outlined" | "naked" | "ghost";
  size: "small" | "large" | "expressiveLarge";
  shape: "circle" | "sharp" | "rounded";
  background:
    | "primary"
    | "secondary"
    | "tertiary"
    | "destructive"
    | "action"
    | "standard";
  text:
    | "primary"
    | "secondary"
    | "tertiary"
    | "destructive"
    | "action"
    | "standard";
  isDisabled: "isDisabled";
  iconOnly: "iconOnly";
  showStartIcon: "showStartIcon";
  showEndIcon: "showEndIcon";
};
export type PlasmicButton__VariantsArgs = {
  anatomy?: MultiChoiceArg<"solid" | "outlined" | "naked" | "ghost">;
  size?: SingleChoiceArg<"small" | "large" | "expressiveLarge">;
  shape?: SingleChoiceArg<"circle" | "sharp" | "rounded">;
  background?: SingleChoiceArg<
    "primary" | "secondary" | "tertiary" | "destructive" | "action" | "standard"
  >;
  text?: SingleChoiceArg<
    "primary" | "secondary" | "tertiary" | "destructive" | "action" | "standard"
  >;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  iconOnly?: SingleBooleanChoiceArg<"iconOnly">;
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  showEndIcon?: SingleBooleanChoiceArg<"showEndIcon">;
};
type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  "anatomy",
  "size",
  "shape",
  "background",
  "text",
  "isDisabled",
  "iconOnly",
  "showStartIcon",
  "showEndIcon"
);

export type PlasmicButton__ArgsType = {
  children?: React.ReactNode;
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  link?: string;
  submitsForm?: boolean;
  target?: boolean;
  endIcon2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>(
  "children",
  "startIcon",
  "endIcon",
  "link",
  "submitsForm",
  "target",
  "endIcon2"
);

export type PlasmicButton__OverridesType = {
  root?: Flex__<"button">;
  contentGroup?: Flex__<"div">;
  startIconContainer?: Flex__<"div">;
  labelContainer?: Flex__<"div">;
  endIconContainer?: Flex__<"div">;
  actionGroup?: Flex__<"div">;
  actionContainer?: Flex__<"div">;
};

export interface DefaultButtonProps extends pp.BaseButtonProps {
  submitsForm?: boolean;
  target?: boolean;
  endIcon2?: React.ReactNode;
  anatomy?: MultiChoiceArg<"solid" | "outlined" | "naked" | "ghost">;
  size?: SingleChoiceArg<"small" | "large" | "expressiveLarge">;
  shape?: SingleChoiceArg<"circle" | "sharp" | "rounded">;
  background?: SingleChoiceArg<
    "primary" | "secondary" | "tertiary" | "destructive" | "action" | "standard"
  >;
  text?: SingleChoiceArg<
    "primary" | "secondary" | "tertiary" | "destructive" | "action" | "standard"
  >;
  iconOnly?: SingleBooleanChoiceArg<"iconOnly">;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled
      },
      {
        path: "shape",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.shape
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "showStartIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showStartIcon
      },
      {
        path: "showEndIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showEndIcon
      },
      {
        path: "iconOnly",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconOnly
      },
      {
        path: "background",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.background
      },
      {
        path: "anatomy",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.anatomy
      },
      {
        path: "text",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.text
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false
    });
  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_switch_css.plasmic_tokens,
        plasmic_label_css.plasmic_tokens,
        plasmic_avatar_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        plasmic_form_input_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        plasmic_menu_item_css.plasmic_tokens,
        plasmic_separator_css.plasmic_tokens,
        plasmic_form_checkbox_css.plasmic_tokens,
        plasmic_form_select_css.plasmic_tokens,
        plasmic_list_item_css.plasmic_tokens,
        plasmic_advance_card_css.plasmic_tokens,
        plasmic_statistic_css.plasmic_tokens,
        plasmic_image_css.plasmic_tokens,
        plasmic_container_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_core_css.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [plasmic_core_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_core_css.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          ),
          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.root___focusVisibleWithin_background_action]:
            hasVariant($state, "background", "action") &&
            triggers.focusVisibleWithin_root,
          [sty.root___focusVisibleWithin_background_destructive]:
            hasVariant($state, "background", "destructive") &&
            triggers.focusVisibleWithin_root,
          [sty.root___focusVisibleWithin_background_primary]:
            hasVariant($state, "background", "primary") &&
            triggers.focusVisibleWithin_root,
          [sty.root___focusVisibleWithin_background_secondary]:
            hasVariant($state, "background", "secondary") &&
            triggers.focusVisibleWithin_root,
          [sty.root___focusVisibleWithin_background_tertiary]:
            hasVariant($state, "background", "tertiary") &&
            triggers.focusVisibleWithin_root,
          [sty.rootanatomy_ghost]: hasVariant($state, "anatomy", "ghost"),
          [sty.rootanatomy_naked]: hasVariant($state, "anatomy", "naked"),
          [sty.rootanatomy_outlined]: hasVariant($state, "anatomy", "outlined"),
          [sty.rootanatomy_solid]: hasVariant($state, "anatomy", "solid"),
          [sty.rootbackground_action]: hasVariant(
            $state,
            "background",
            "action"
          ),
          [sty.rootbackground_destructive]: hasVariant(
            $state,
            "background",
            "destructive"
          ),
          [sty.rootbackground_primary]: hasVariant(
            $state,
            "background",
            "primary"
          ),
          [sty.rootbackground_secondary]: hasVariant(
            $state,
            "background",
            "secondary"
          ),
          [sty.rootbackground_standard]: hasVariant(
            $state,
            "background",
            "standard"
          ),
          [sty.rootbackground_tertiary]: hasVariant(
            $state,
            "background",
            "tertiary"
          ),
          [sty.rooticonOnly]: hasVariant($state, "iconOnly", "iconOnly"),
          [sty.rootisDisabled]: hasVariant($state, "isDisabled", "isDisabled"),
          [sty.rootshape_circle]: hasVariant($state, "shape", "circle"),
          [sty.rootshape_rounded]: hasVariant($state, "shape", "rounded"),
          [sty.rootshape_sharp]: hasVariant($state, "shape", "sharp"),
          [sty.rootshowStartIcon]: hasVariant(
            $state,
            "showStartIcon",
            "showStartIcon"
          ),
          [sty.rootsize_expressiveLarge]: hasVariant(
            $state,
            "size",
            "expressiveLarge"
          ),
          [sty.rootsize_large]: hasVariant($state, "size", "large"),
          [sty.rootsize_small]: hasVariant($state, "size", "small"),
          [sty.roottext_primary]: hasVariant($state, "text", "primary"),
          [sty.roottext_secondary]: hasVariant($state, "text", "secondary"),
          [sty.roottext_standard]: hasVariant($state, "text", "standard")
        }
      )}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"contentGroup"}
        data-plasmic-override={overrides.contentGroup}
        hasGap={true}
        className={classNames(projectcss.all, sty.contentGroup, {
          [sty.contentGroupsize_expressiveLarge]: hasVariant(
            $state,
            "size",
            "expressiveLarge"
          )
        })}
      >
        <div
          data-plasmic-name={"startIconContainer"}
          data-plasmic-override={overrides.startIconContainer}
          className={classNames(projectcss.all, sty.startIconContainer, {
            [sty.startIconContaineranatomy_ghost]: hasVariant(
              $state,
              "anatomy",
              "ghost"
            ),
            [sty.startIconContaineranatomy_outlined]: hasVariant(
              $state,
              "anatomy",
              "outlined"
            ),
            [sty.startIconContaineranatomy_solid]: hasVariant(
              $state,
              "anatomy",
              "solid"
            ),
            [sty.startIconContainerbackground_secondary]: hasVariant(
              $state,
              "background",
              "secondary"
            ),
            [sty.startIconContainericonOnly]: hasVariant(
              $state,
              "iconOnly",
              "iconOnly"
            ),
            [sty.startIconContainershowStartIcon]: hasVariant(
              $state,
              "showStartIcon",
              "showStartIcon"
            ),
            [sty.startIconContainersize_expressiveLarge]: hasVariant(
              $state,
              "size",
              "expressiveLarge"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaCheckSvgIcon
                className={classNames(projectcss.all, sty.svg__heUm7)}
                role={"img"}
              />
            ),

            value: args.startIcon,
            className: classNames(sty.slotTargetStartIcon, {
              [sty.slotTargetStartIconanatomy_ghost]: hasVariant(
                $state,
                "anatomy",
                "ghost"
              ),
              [sty.slotTargetStartIconanatomy_naked]: hasVariant(
                $state,
                "anatomy",
                "naked"
              ),
              [sty.slotTargetStartIconanatomy_outlined]: hasVariant(
                $state,
                "anatomy",
                "outlined"
              ),
              [sty.slotTargetStartIconbackground_action]: hasVariant(
                $state,
                "background",
                "action"
              ),
              [sty.slotTargetStartIconbackground_destructive]: hasVariant(
                $state,
                "background",
                "destructive"
              ),
              [sty.slotTargetStartIconbackground_secondary]: hasVariant(
                $state,
                "background",
                "secondary"
              ),
              [sty.slotTargetStartIconbackground_tertiary]: hasVariant(
                $state,
                "background",
                "tertiary"
              ),
              [sty.slotTargetStartIconsize_expressiveLarge]: hasVariant(
                $state,
                "size",
                "expressiveLarge"
              ),
              [sty.slotTargetStartIcontext_action]: hasVariant(
                $state,
                "text",
                "action"
              ),
              [sty.slotTargetStartIcontext_destructive]: hasVariant(
                $state,
                "text",
                "destructive"
              ),
              [sty.slotTargetStartIcontext_primary]: hasVariant(
                $state,
                "text",
                "primary"
              ),
              [sty.slotTargetStartIcontext_secondary]: hasVariant(
                $state,
                "text",
                "secondary"
              ),
              [sty.slotTargetStartIcontext_tertiary]: hasVariant(
                $state,
                "text",
                "tertiary"
              )
            })
          })}
        </div>
        <div
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames(projectcss.all, sty.labelContainer, {
            [sty.labelContainericonOnly]: hasVariant(
              $state,
              "iconOnly",
              "iconOnly"
            ),
            [sty.labelContainerisDisabled]: hasVariant(
              $state,
              "isDisabled",
              "isDisabled"
            ),
            [sty.labelContainersize_small]: hasVariant($state, "size", "small"),
            [sty.labelContainertext_standard]: hasVariant(
              $state,
              "text",
              "standard"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1WRuC
                )}
              >
                {"Button"}
              </div>
            ),
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildrenanatomy_ghost]: hasVariant(
                $state,
                "anatomy",
                "ghost"
              ),
              [sty.slotTargetChildrenanatomy_naked]: hasVariant(
                $state,
                "anatomy",
                "naked"
              ),
              [sty.slotTargetChildrenanatomy_outlined]: hasVariant(
                $state,
                "anatomy",
                "outlined"
              ),
              [sty.slotTargetChildrenbackground_action]: hasVariant(
                $state,
                "background",
                "action"
              ),
              [sty.slotTargetChildrenbackground_destructive]: hasVariant(
                $state,
                "background",
                "destructive"
              ),
              [sty.slotTargetChildrenbackground_primary]: hasVariant(
                $state,
                "background",
                "primary"
              ),
              [sty.slotTargetChildrenbackground_secondary]: hasVariant(
                $state,
                "background",
                "secondary"
              ),
              [sty.slotTargetChildrenbackground_tertiary]: hasVariant(
                $state,
                "background",
                "tertiary"
              ),
              [sty.slotTargetChildrenisDisabled]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              ),
              [sty.slotTargetChildrenshape_circle]: hasVariant(
                $state,
                "shape",
                "circle"
              ),
              [sty.slotTargetChildrensize_expressiveLarge]: hasVariant(
                $state,
                "size",
                "expressiveLarge"
              ),
              [sty.slotTargetChildrensize_large]: hasVariant(
                $state,
                "size",
                "large"
              ),
              [sty.slotTargetChildrensize_small]: hasVariant(
                $state,
                "size",
                "small"
              ),
              [sty.slotTargetChildrentext_action]: hasVariant(
                $state,
                "text",
                "action"
              ),
              [sty.slotTargetChildrentext_destructive]: hasVariant(
                $state,
                "text",
                "destructive"
              ),
              [sty.slotTargetChildrentext_primary]: hasVariant(
                $state,
                "text",
                "primary"
              ),
              [sty.slotTargetChildrentext_secondary]: hasVariant(
                $state,
                "text",
                "secondary"
              ),
              [sty.slotTargetChildrentext_standard]: hasVariant(
                $state,
                "text",
                "standard"
              ),
              [sty.slotTargetChildrentext_tertiary]: hasVariant(
                $state,
                "text",
                "tertiary"
              )
            })
          })}
        </div>
        <div
          data-plasmic-name={"endIconContainer"}
          data-plasmic-override={overrides.endIconContainer}
          className={classNames(projectcss.all, sty.endIconContainer, {
            [sty.endIconContaineranatomy_ghost]: hasVariant(
              $state,
              "anatomy",
              "ghost"
            ),
            [sty.endIconContaineranatomy_outlined]: hasVariant(
              $state,
              "anatomy",
              "outlined"
            ),
            [sty.endIconContainerbackground_secondary]: hasVariant(
              $state,
              "background",
              "secondary"
            ),
            [sty.endIconContainershowEndIcon]: hasVariant(
              $state,
              "showEndIcon",
              "showEndIcon"
            ),
            [sty.endIconContainersize_expressiveLarge]: hasVariant(
              $state,
              "size",
              "expressiveLarge"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaArrowRightSvgIcon
                className={classNames(projectcss.all, sty.svg__hWj1Q)}
                role={"img"}
              />
            ),

            value: args.endIcon,
            className: classNames(sty.slotTargetEndIcon, {
              [sty.slotTargetEndIconanatomy_ghost]: hasVariant(
                $state,
                "anatomy",
                "ghost"
              ),
              [sty.slotTargetEndIconanatomy_naked]: hasVariant(
                $state,
                "anatomy",
                "naked"
              ),
              [sty.slotTargetEndIconanatomy_outlined]: hasVariant(
                $state,
                "anatomy",
                "outlined"
              ),
              [sty.slotTargetEndIconbackground_action]: hasVariant(
                $state,
                "background",
                "action"
              ),
              [sty.slotTargetEndIconbackground_destructive]: hasVariant(
                $state,
                "background",
                "destructive"
              ),
              [sty.slotTargetEndIconbackground_secondary]: hasVariant(
                $state,
                "background",
                "secondary"
              ),
              [sty.slotTargetEndIconbackground_tertiary]: hasVariant(
                $state,
                "background",
                "tertiary"
              ),
              [sty.slotTargetEndIcontext_action]: hasVariant(
                $state,
                "text",
                "action"
              ),
              [sty.slotTargetEndIcontext_destructive]: hasVariant(
                $state,
                "text",
                "destructive"
              ),
              [sty.slotTargetEndIcontext_primary]: hasVariant(
                $state,
                "text",
                "primary"
              ),
              [sty.slotTargetEndIcontext_secondary]: hasVariant(
                $state,
                "text",
                "secondary"
              ),
              [sty.slotTargetEndIcontext_tertiary]: hasVariant(
                $state,
                "text",
                "tertiary"
              )
            })
          })}
        </div>
      </Stack__>
      <div
        data-plasmic-name={"actionGroup"}
        data-plasmic-override={overrides.actionGroup}
        className={classNames(projectcss.all, sty.actionGroup)}
      >
        <div
          data-plasmic-name={"actionContainer"}
          data-plasmic-override={overrides.actionContainer}
          className={classNames(projectcss.all, sty.actionContainer, {
            [sty.actionContaineranatomy_ghost]: hasVariant(
              $state,
              "anatomy",
              "ghost"
            ),
            [sty.actionContaineranatomy_outlined]: hasVariant(
              $state,
              "anatomy",
              "outlined"
            ),
            [sty.actionContainerbackground_secondary]: hasVariant(
              $state,
              "background",
              "secondary"
            ),
            [sty.actionContainershowEndIcon]: hasVariant(
              $state,
              "showEndIcon",
              "showEndIcon"
            ),
            [sty.actionContainersize_expressiveLarge]: hasVariant(
              $state,
              "size",
              "expressiveLarge"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <FaArrowRightSvgIcon
                className={classNames(projectcss.all, sty.svg__yjIu8)}
                role={"img"}
              />
            ),

            value: args.endIcon2,
            className: classNames(sty.slotTargetEndIcon2, {
              [sty.slotTargetEndIcon2anatomy_ghost]: hasVariant(
                $state,
                "anatomy",
                "ghost"
              ),
              [sty.slotTargetEndIcon2anatomy_naked]: hasVariant(
                $state,
                "anatomy",
                "naked"
              ),
              [sty.slotTargetEndIcon2anatomy_outlined]: hasVariant(
                $state,
                "anatomy",
                "outlined"
              ),
              [sty.slotTargetEndIcon2background_action]: hasVariant(
                $state,
                "background",
                "action"
              ),
              [sty.slotTargetEndIcon2background_destructive]: hasVariant(
                $state,
                "background",
                "destructive"
              ),
              [sty.slotTargetEndIcon2background_secondary]: hasVariant(
                $state,
                "background",
                "secondary"
              ),
              [sty.slotTargetEndIcon2background_tertiary]: hasVariant(
                $state,
                "background",
                "tertiary"
              ),
              [sty.slotTargetEndIcon2text_action]: hasVariant(
                $state,
                "text",
                "action"
              ),
              [sty.slotTargetEndIcon2text_destructive]: hasVariant(
                $state,
                "text",
                "destructive"
              ),
              [sty.slotTargetEndIcon2text_primary]: hasVariant(
                $state,
                "text",
                "primary"
              ),
              [sty.slotTargetEndIcon2text_secondary]: hasVariant(
                $state,
                "text",
                "secondary"
              ),
              [sty.slotTargetEndIcon2text_tertiary]: hasVariant(
                $state,
                "text",
                "tertiary"
              )
            })
          })}
        </div>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.PlumeButtonProps>(
  props: P,
  ref: pp.ButtonRef
) {
  const b = pp.useButton<P, typeof PlasmicButton>(
    PlasmicButton,
    props,
    {
      showStartIconVariant: {
        group: "showStartIcon",
        variant: "showStartIcon"
      },
      showEndIconVariant: { group: "showEndIcon", variant: "showEndIcon" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      contentSlot: "children",
      startIconSlot: "startIcon",
      endIconSlot: "endIcon",
      root: "root"
    },
    ref
  );
  if (b.plasmicProps.overrides.root.as === "a") {
    b.plasmicProps.overrides.root.as = PlasmicLink__;
    b.plasmicProps.overrides.root.props.component = Link;
    b.plasmicProps.overrides.root.props.platform = "nextjs";
  }
  return b;
}

const PlasmicDescendants = {
  root: [
    "root",
    "contentGroup",
    "startIconContainer",
    "labelContainer",
    "endIconContainer",
    "actionGroup",
    "actionContainer"
  ],
  contentGroup: [
    "contentGroup",
    "startIconContainer",
    "labelContainer",
    "endIconContainer"
  ],
  startIconContainer: ["startIconContainer"],
  labelContainer: ["labelContainer"],
  endIconContainer: ["endIconContainer"],
  actionGroup: ["actionGroup", "actionContainer"],
  actionContainer: ["actionContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "button";
  contentGroup: "div";
  startIconContainer: "div";
  labelContainer: "div";
  endIconContainer: "div";
  actionGroup: "div";
  actionContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButton__ArgProps,
          internalVariantPropNames: PlasmicButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentGroup: makeNodeComponent("contentGroup"),
    startIconContainer: makeNodeComponent("startIconContainer"),
    labelContainer: makeNodeComponent("labelContainer"),
    endIconContainer: makeNodeComponent("endIconContainer"),
    actionGroup: makeNodeComponent("actionGroup"),
    actionContainer: makeNodeComponent("actionContainer"),

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,

    useBehavior
  }
);

export default PlasmicButton;
/* prettier-ignore-end */

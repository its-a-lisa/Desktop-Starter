// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6eqm1KNiFrAWEs21Xh4t1D
// Component: 60g4hcPy21T2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import * as pp from "@plasmicapp/react-web";

import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_switch_css from "../switch/plasmic.module.css"; // plasmic-import: i4n9AbVD4xq7VvHzvrVDh9/projectcss
import plasmic_badge_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_form_input_css from "../form_input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_separator_css from "../separator/plasmic.module.css"; // plasmic-import: mGt6E9beS9xM1LmsApto9L/projectcss
import plasmic_form_checkbox_css from "../form_checkbox/plasmic.module.css"; // plasmic-import: bEVQSMSYHutfoPgsCgDaki/projectcss
import plasmic_form_select_css from "../form_select/plasmic.module.css"; // plasmic-import: ivrmEdvdUKbShkHq3Wnmy4/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import plasmic_advance_card_css from "../advance_card/plasmic.module.css"; // plasmic-import: 71RGmKESGHwX1FQiVTH6Ch/projectcss
import plasmic_statistic_css from "../statistic/plasmic.module.css"; // plasmic-import: tq1m84LuCppLaXTJBWMK12/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_container_css from "../container/plasmic.module.css"; // plasmic-import: d9PrY1SRs2wAiwFXTkwPXt/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6eqm1KNiFrAWEs21Xh4t1D/projectcss
import sty from "./PlasmicMenuItem.module.css"; // plasmic-import: 60g4hcPy21T2/css

import FaArrowRightsvgIcon from "../icons/icons/PlasmicIcon__FaArrowRightsvg"; // plasmic-import: laMKK4I5P9un/icon

createPlasmicElementProxy;

export type PlasmicMenuItem__VariantMembers = {
  isDisabled: "isDisabled";
  shape: "rounded" | "round" | "sharp";
  size: "sm" | "md" | "lg" | "xl";
  showStartIcon: "showStartIcon";
  showEndIcon: "showEndIcon";
  iconOnly: "iconOnly";
  background: "primary" | "secondary" | "tertiary" | "destructive" | "action";
  emphasis: "bold" | "subtle" | "minimal" | "clear";
  foreground: "primary" | "secondary" | "tertiary" | "destructive" | "action";
  unnamedVariant: "unnamedVariant";
};
export type PlasmicMenuItem__VariantsArgs = {
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  shape?: SingleChoiceArg<"rounded" | "round" | "sharp">;
  size?: SingleChoiceArg<"sm" | "md" | "lg" | "xl">;
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  showEndIcon?: SingleBooleanChoiceArg<"showEndIcon">;
  iconOnly?: SingleBooleanChoiceArg<"iconOnly">;
  background?: SingleChoiceArg<
    "primary" | "secondary" | "tertiary" | "destructive" | "action"
  >;
  emphasis?: MultiChoiceArg<"bold" | "subtle" | "minimal" | "clear">;
  foreground?: SingleChoiceArg<
    "primary" | "secondary" | "tertiary" | "destructive" | "action"
  >;
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
};
type VariantPropType = keyof PlasmicMenuItem__VariantsArgs;
export const PlasmicMenuItem__VariantProps = new Array<VariantPropType>(
  "isDisabled",
  "shape",
  "size",
  "showStartIcon",
  "showEndIcon",
  "iconOnly",
  "background",
  "emphasis",
  "foreground",
  "unnamedVariant"
);

export type PlasmicMenuItem__ArgsType = {
  children?: React.ReactNode;
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  link?: string;
  submitsForm?: boolean;
  target?: boolean;
};
type ArgPropType = keyof PlasmicMenuItem__ArgsType;
export const PlasmicMenuItem__ArgProps = new Array<ArgPropType>(
  "children",
  "startIcon",
  "endIcon",
  "link",
  "submitsForm",
  "target"
);

export type PlasmicMenuItem__OverridesType = {
  root?: Flex__<"button">;
  startIconContainer?: Flex__<"div">;
  contentContainer?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  endIconContainer?: Flex__<"div">;
};

export interface DefaultMenuItemProps extends pp.BaseButtonProps {
  submitsForm?: boolean;
  target?: boolean;
  shape?: SingleChoiceArg<"rounded" | "round" | "sharp">;
  size?: SingleChoiceArg<"sm" | "md" | "lg" | "xl">;
  iconOnly?: SingleBooleanChoiceArg<"iconOnly">;
  background?: SingleChoiceArg<
    "primary" | "secondary" | "tertiary" | "destructive" | "action"
  >;
  emphasis?: MultiChoiceArg<"bold" | "subtle" | "minimal" | "clear">;
  foreground?: SingleChoiceArg<
    "primary" | "secondary" | "tertiary" | "destructive" | "action"
  >;
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenuItem__RenderFunc(props: {
  variants: PlasmicMenuItem__VariantsArgs;
  args: PlasmicMenuItem__ArgsType;
  overrides: PlasmicMenuItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled
      },
      {
        path: "shape",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.shape
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "showStartIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showStartIcon
      },
      {
        path: "showEndIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showEndIcon
      },
      {
        path: "iconOnly",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconOnly
      },
      {
        path: "background",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.background
      },
      {
        path: "emphasis",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.emphasis
      },
      {
        path: "foreground",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.foreground
      },
      {
        path: "unnamedVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false
    });
  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_switch_css.plasmic_tokens,
        plasmic_badge_css.plasmic_tokens,
        plasmic_avatar_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        plasmic_form_input_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        plasmic_menu_item_css.plasmic_tokens,
        plasmic_separator_css.plasmic_tokens,
        plasmic_form_checkbox_css.plasmic_tokens,
        plasmic_form_select_css.plasmic_tokens,
        plasmic_list_item_css.plasmic_tokens,
        plasmic_advance_card_css.plasmic_tokens,
        plasmic_statistic_css.plasmic_tokens,
        plasmic_image_css.plasmic_tokens,
        plasmic_container_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_core_css.global_mode_darkGrayscale]: hasVariant(
            globalVariants,
            "mode",
            "darkGrayscale"
          ),
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [plasmic_core_css.global_mode_grayscale]: hasVariant(
            globalVariants,
            "mode",
            "grayscale"
          ),
          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.rootbackground_action]: hasVariant(
            $state,
            "background",
            "action"
          ),
          [sty.rootbackground_destructive]: hasVariant(
            $state,
            "background",
            "destructive"
          ),
          [sty.rootbackground_primary]: hasVariant(
            $state,
            "background",
            "primary"
          ),
          [sty.rootbackground_secondary]: hasVariant(
            $state,
            "background",
            "secondary"
          ),
          [sty.rootbackground_tertiary]: hasVariant(
            $state,
            "background",
            "tertiary"
          ),
          [sty.rootemphasis_bold]: hasVariant($state, "emphasis", "bold"),
          [sty.rootemphasis_clear]: hasVariant($state, "emphasis", "clear"),
          [sty.rootemphasis_minimal]: hasVariant($state, "emphasis", "minimal"),
          [sty.rootemphasis_subtle]: hasVariant($state, "emphasis", "subtle"),
          [sty.rootforeground_primary]: hasVariant(
            $state,
            "foreground",
            "primary"
          ),
          [sty.rootforeground_secondary]: hasVariant(
            $state,
            "foreground",
            "secondary"
          ),
          [sty.rootisDisabled]: hasVariant($state, "isDisabled", "isDisabled"),
          [sty.rootshape_round]: hasVariant($state, "shape", "round"),
          [sty.rootshape_rounded]: hasVariant($state, "shape", "rounded"),
          [sty.rootshape_rounded_size_sm]:
            hasVariant($state, "size", "sm") &&
            hasVariant($state, "shape", "rounded"),
          [sty.rootshape_sharp]: hasVariant($state, "shape", "sharp"),
          [sty.rootshowStartIcon]: hasVariant(
            $state,
            "showStartIcon",
            "showStartIcon"
          ),
          [sty.rootsize_lg]: hasVariant($state, "size", "lg"),
          [sty.rootsize_md]: hasVariant($state, "size", "md"),
          [sty.rootsize_sm]: hasVariant($state, "size", "sm"),
          [sty.rootsize_xl]: hasVariant($state, "size", "xl")
        }
      )}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      <div
        data-plasmic-name={"startIconContainer"}
        data-plasmic-override={overrides.startIconContainer}
        className={classNames(projectcss.all, sty.startIconContainer, {
          [sty.startIconContainerbackground_secondary]: hasVariant(
            $state,
            "background",
            "secondary"
          ),
          [sty.startIconContaineremphasis_subtle]: hasVariant(
            $state,
            "emphasis",
            "subtle"
          ),
          [sty.startIconContainericonOnly]: hasVariant(
            $state,
            "iconOnly",
            "iconOnly"
          ),
          [sty.startIconContainershowStartIcon]: hasVariant(
            $state,
            "showStartIcon",
            "showStartIcon"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <FaArrowRightsvgIcon
              className={classNames(projectcss.all, sty.svg___1BYcH)}
              role={"img"}
            />
          ),

          value: args.startIcon,
          className: classNames(sty.slotTargetStartIcon, {
            [sty.slotTargetStartIconbackground_action]: hasVariant(
              $state,
              "background",
              "action"
            ),
            [sty.slotTargetStartIconbackground_destructive]: hasVariant(
              $state,
              "background",
              "destructive"
            ),
            [sty.slotTargetStartIconbackground_primary]: hasVariant(
              $state,
              "background",
              "primary"
            ),
            [sty.slotTargetStartIconbackground_secondary]: hasVariant(
              $state,
              "background",
              "secondary"
            ),
            [sty.slotTargetStartIconbackground_tertiary]: hasVariant(
              $state,
              "background",
              "tertiary"
            ),
            [sty.slotTargetStartIconemphasis_clear]: hasVariant(
              $state,
              "emphasis",
              "clear"
            ),
            [sty.slotTargetStartIconemphasis_minimal]: hasVariant(
              $state,
              "emphasis",
              "minimal"
            ),
            [sty.slotTargetStartIconemphasis_subtle]: hasVariant(
              $state,
              "emphasis",
              "subtle"
            ),
            [sty.slotTargetStartIconforeground_action]: hasVariant(
              $state,
              "foreground",
              "action"
            ),
            [sty.slotTargetStartIconforeground_destructive]: hasVariant(
              $state,
              "foreground",
              "destructive"
            ),
            [sty.slotTargetStartIconforeground_primary]: hasVariant(
              $state,
              "foreground",
              "primary"
            ),
            [sty.slotTargetStartIconforeground_secondary]: hasVariant(
              $state,
              "foreground",
              "secondary"
            ),
            [sty.slotTargetStartIconforeground_tertiary]: hasVariant(
              $state,
              "foreground",
              "tertiary"
            )
          })
        })}
      </div>
      <div
        data-plasmic-name={"contentContainer"}
        data-plasmic-override={overrides.contentContainer}
        className={classNames(projectcss.all, sty.contentContainer, {
          [sty.contentContainericonOnly]: hasVariant(
            $state,
            "iconOnly",
            "iconOnly"
          ),
          [sty.contentContainerisDisabled]: hasVariant(
            $state,
            "isDisabled",
            "isDisabled"
          ),
          [sty.contentContainershape_rounded]: hasVariant(
            $state,
            "shape",
            "rounded"
          )
        })}
      >
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          platform={"nextjs"}
        >
          {renderPlasmicSlot({
            defaultContents: "Item",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildrenbackground_action]: hasVariant(
                $state,
                "background",
                "action"
              ),
              [sty.slotTargetChildrenbackground_destructive]: hasVariant(
                $state,
                "background",
                "destructive"
              ),
              [sty.slotTargetChildrenbackground_primary]: hasVariant(
                $state,
                "background",
                "primary"
              ),
              [sty.slotTargetChildrenbackground_secondary]: hasVariant(
                $state,
                "background",
                "secondary"
              ),
              [sty.slotTargetChildrenbackground_tertiary]: hasVariant(
                $state,
                "background",
                "tertiary"
              ),
              [sty.slotTargetChildrenemphasis_clear]: hasVariant(
                $state,
                "emphasis",
                "clear"
              ),
              [sty.slotTargetChildrenemphasis_minimal]: hasVariant(
                $state,
                "emphasis",
                "minimal"
              ),
              [sty.slotTargetChildrenemphasis_subtle]: hasVariant(
                $state,
                "emphasis",
                "subtle"
              ),
              [sty.slotTargetChildrenforeground_action]: hasVariant(
                $state,
                "foreground",
                "action"
              ),
              [sty.slotTargetChildrenforeground_destructive]: hasVariant(
                $state,
                "foreground",
                "destructive"
              ),
              [sty.slotTargetChildrenforeground_primary]: hasVariant(
                $state,
                "foreground",
                "primary"
              ),
              [sty.slotTargetChildrenforeground_secondary]: hasVariant(
                $state,
                "foreground",
                "secondary"
              ),
              [sty.slotTargetChildrenforeground_tertiary]: hasVariant(
                $state,
                "foreground",
                "tertiary"
              ),
              [sty.slotTargetChildrenisDisabled]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              ),
              [sty.slotTargetChildrenshape_round]: hasVariant(
                $state,
                "shape",
                "round"
              ),
              [sty.slotTargetChildrenshape_rounded]: hasVariant(
                $state,
                "shape",
                "rounded"
              ),
              [sty.slotTargetChildrensize_md]: hasVariant($state, "size", "md"),
              [sty.slotTargetChildrenunnamedVariant]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            })
          })}
        </PlasmicLink__>
      </div>
      <div
        data-plasmic-name={"endIconContainer"}
        data-plasmic-override={overrides.endIconContainer}
        className={classNames(projectcss.all, sty.endIconContainer, {
          [sty.endIconContainerbackground_secondary]: hasVariant(
            $state,
            "background",
            "secondary"
          ),
          [sty.endIconContaineremphasis_subtle]: hasVariant(
            $state,
            "emphasis",
            "subtle"
          ),
          [sty.endIconContainershowEndIcon]: hasVariant(
            $state,
            "showEndIcon",
            "showEndIcon"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <svg
              className={classNames(projectcss.all, sty.svg___1IgPt)}
              role={"img"}
            />
          ),

          value: args.endIcon,
          className: classNames(sty.slotTargetEndIcon, {
            [sty.slotTargetEndIconbackground_action]: hasVariant(
              $state,
              "background",
              "action"
            ),
            [sty.slotTargetEndIconbackground_destructive]: hasVariant(
              $state,
              "background",
              "destructive"
            ),
            [sty.slotTargetEndIconbackground_primary]: hasVariant(
              $state,
              "background",
              "primary"
            ),
            [sty.slotTargetEndIconbackground_secondary]: hasVariant(
              $state,
              "background",
              "secondary"
            ),
            [sty.slotTargetEndIconbackground_tertiary]: hasVariant(
              $state,
              "background",
              "tertiary"
            ),
            [sty.slotTargetEndIconemphasis_clear]: hasVariant(
              $state,
              "emphasis",
              "clear"
            ),
            [sty.slotTargetEndIconemphasis_minimal]: hasVariant(
              $state,
              "emphasis",
              "minimal"
            ),
            [sty.slotTargetEndIconemphasis_subtle]: hasVariant(
              $state,
              "emphasis",
              "subtle"
            ),
            [sty.slotTargetEndIconforeground_action]: hasVariant(
              $state,
              "foreground",
              "action"
            ),
            [sty.slotTargetEndIconforeground_destructive]: hasVariant(
              $state,
              "foreground",
              "destructive"
            ),
            [sty.slotTargetEndIconforeground_primary]: hasVariant(
              $state,
              "foreground",
              "primary"
            ),
            [sty.slotTargetEndIconforeground_secondary]: hasVariant(
              $state,
              "foreground",
              "secondary"
            ),
            [sty.slotTargetEndIconforeground_tertiary]: hasVariant(
              $state,
              "foreground",
              "tertiary"
            )
          })
        })}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.PlumeButtonProps>(
  props: P,
  ref: pp.ButtonRef
) {
  const b = pp.useButton<P, typeof PlasmicMenuItem>(
    PlasmicMenuItem,
    props,
    {
      showStartIconVariant: {
        group: "showStartIcon",
        variant: "showStartIcon"
      },
      showEndIconVariant: { group: "showEndIcon", variant: "showEndIcon" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      contentSlot: "children",
      startIconSlot: "startIcon",
      endIconSlot: "endIcon",
      root: "root"
    },
    ref
  );
  if (b.plasmicProps.overrides.root.as === "a") {
    b.plasmicProps.overrides.root.as = PlasmicLink__;
    b.plasmicProps.overrides.root.props.component = Link;
    b.plasmicProps.overrides.root.props.platform = "nextjs";
  }
  return b;
}

const PlasmicDescendants = {
  root: [
    "root",
    "startIconContainer",
    "contentContainer",
    "link",
    "endIconContainer"
  ],
  startIconContainer: ["startIconContainer"],
  contentContainer: ["contentContainer", "link"],
  link: ["link"],
  endIconContainer: ["endIconContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "button";
  startIconContainer: "div";
  contentContainer: "div";
  link: "a";
  endIconContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenuItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenuItem__VariantsArgs;
    args?: PlasmicMenuItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMenuItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMenuItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenuItem__ArgProps,
          internalVariantPropNames: PlasmicMenuItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuItem";
  } else {
    func.displayName = `PlasmicMenuItem.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuItem = Object.assign(
  // Top-level PlasmicMenuItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    startIconContainer: makeNodeComponent("startIconContainer"),
    contentContainer: makeNodeComponent("contentContainer"),
    link: makeNodeComponent("link"),
    endIconContainer: makeNodeComponent("endIconContainer"),

    // Metadata about props expected for PlasmicMenuItem
    internalVariantProps: PlasmicMenuItem__VariantProps,
    internalArgProps: PlasmicMenuItem__ArgProps,

    useBehavior
  }
);

export default PlasmicMenuItem;
/* prettier-ignore-end */

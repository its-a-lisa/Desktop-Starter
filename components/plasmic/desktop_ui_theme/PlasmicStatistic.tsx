// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6eqm1KNiFrAWEs21Xh4t1D
// Component: 61_eQwEAF2yv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ThemeValue, useTheme } from "../core/PlasmicGlobalVariant__Theme"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_switch_css from "../switch/plasmic.module.css"; // plasmic-import: i4n9AbVD4xq7VvHzvrVDh9/projectcss
import plasmic_label_css from "../badge/plasmic.module.css"; // plasmic-import: 6PoNur73nfoJqbzNtkNpAX/projectcss
import plasmic_avatar_css from "../avatar/plasmic.module.css"; // plasmic-import: wjwfXMtbnYisAPU4bK5cC5/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_form_input_css from "../form_input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_separator_css from "../separator/plasmic.module.css"; // plasmic-import: mGt6E9beS9xM1LmsApto9L/projectcss
import plasmic_form_checkbox_css from "../form_checkbox/plasmic.module.css"; // plasmic-import: bEVQSMSYHutfoPgsCgDaki/projectcss
import plasmic_form_select_css from "../form_select/plasmic.module.css"; // plasmic-import: ivrmEdvdUKbShkHq3Wnmy4/projectcss
import plasmic_list_item_css from "../list_item/plasmic.module.css"; // plasmic-import: fKizj5juSSuZK31zh3BBJE/projectcss
import plasmic_advance_card_css from "../advance_card/plasmic.module.css"; // plasmic-import: 71RGmKESGHwX1FQiVTH6Ch/projectcss
import plasmic_statistic_css from "../statistic/plasmic.module.css"; // plasmic-import: tq1m84LuCppLaXTJBWMK12/projectcss
import plasmic_image_css from "../image/plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import plasmic_container_css from "../container/plasmic.module.css"; // plasmic-import: d9PrY1SRs2wAiwFXTkwPXt/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 6eqm1KNiFrAWEs21Xh4t1D/projectcss
import sty from "./PlasmicStatistic.module.css"; // plasmic-import: 61_eQwEAF2yv/css

createPlasmicElementProxy;

export type PlasmicStatistic__VariantMembers = {
  noLabel: "noLabel";
  isDisabled: "isDisabled";
  label: "bottom" | "top" | "left" | "right";
  lineWrap: "lineWrap";
  secondaryStat: "secondaryStat";
  background: "_default" | "primary" | "secondary" | "tertiary";
  shape: "square";
  border: "none";
};
export type PlasmicStatistic__VariantsArgs = {
  noLabel?: SingleBooleanChoiceArg<"noLabel">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  label?: SingleChoiceArg<"bottom" | "top" | "left" | "right">;
  lineWrap?: SingleBooleanChoiceArg<"lineWrap">;
  secondaryStat?: SingleBooleanChoiceArg<"secondaryStat">;
  background?: SingleChoiceArg<
    "_default" | "primary" | "secondary" | "tertiary"
  >;
  shape?: SingleChoiceArg<"square">;
  border?: SingleChoiceArg<"none">;
};
type VariantPropType = keyof PlasmicStatistic__VariantsArgs;
export const PlasmicStatistic__VariantProps = new Array<VariantPropType>(
  "noLabel",
  "isDisabled",
  "label",
  "lineWrap",
  "secondaryStat",
  "background",
  "shape",
  "border"
);

export type PlasmicStatistic__ArgsType = {
  primaryNumber?: React.ReactNode;
  statLabel?: React.ReactNode;
  secondaryNumber?: React.ReactNode;
};
type ArgPropType = keyof PlasmicStatistic__ArgsType;
export const PlasmicStatistic__ArgProps = new Array<ArgPropType>(
  "primaryNumber",
  "statLabel",
  "secondaryNumber"
);

export type PlasmicStatistic__OverridesType = {
  root?: Flex__<"div">;
  primaryNumberStack?: Flex__<"div">;
  secondaryNumberStack?: Flex__<"div">;
  labelStack?: Flex__<"div">;
};

export interface DefaultStatisticProps {
  primaryNumber?: React.ReactNode;
  statLabel?: React.ReactNode;
  secondaryNumber?: React.ReactNode;
  noLabel?: SingleBooleanChoiceArg<"noLabel">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  label?: SingleChoiceArg<"bottom" | "top" | "left" | "right">;
  lineWrap?: SingleBooleanChoiceArg<"lineWrap">;
  secondaryStat?: SingleBooleanChoiceArg<"secondaryStat">;
  background?: SingleChoiceArg<
    "_default" | "primary" | "secondary" | "tertiary"
  >;
  shape?: SingleChoiceArg<"square">;
  border?: SingleChoiceArg<"none">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStatistic__RenderFunc(props: {
  variants: PlasmicStatistic__VariantsArgs;
  args: PlasmicStatistic__ArgsType;
  overrides: PlasmicStatistic__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noLabel",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noLabel
      },
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled
      },
      {
        path: "label",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.label
      },
      {
        path: "lineWrap",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.lineWrap
      },
      {
        path: "secondaryStat",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.secondaryStat
      },
      {
        path: "background",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.background
      },
      {
        path: "shape",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.shape
      },
      {
        path: "border",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.border
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_switch_css.plasmic_tokens,
        plasmic_label_css.plasmic_tokens,
        plasmic_avatar_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        plasmic_form_input_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        plasmic_menu_item_css.plasmic_tokens,
        plasmic_separator_css.plasmic_tokens,
        plasmic_form_checkbox_css.plasmic_tokens,
        plasmic_form_select_css.plasmic_tokens,
        plasmic_list_item_css.plasmic_tokens,
        plasmic_advance_card_css.plasmic_tokens,
        plasmic_statistic_css.plasmic_tokens,
        plasmic_image_css.plasmic_tokens,
        plasmic_container_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_core_css.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [plasmic_core_css.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [plasmic_core_css.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          ),
          [sty.rootbackground_primary]: hasVariant(
            $state,
            "background",
            "primary"
          ),
          [sty.rootbackground_secondary]: hasVariant(
            $state,
            "background",
            "secondary"
          ),
          [sty.rootbackground_tertiary]: hasVariant(
            $state,
            "background",
            "tertiary"
          ),
          [sty.rootborder_none]: hasVariant($state, "border", "none"),
          [sty.rootisDisabled]: hasVariant($state, "isDisabled", "isDisabled"),
          [sty.rootlabel_left]: hasVariant($state, "label", "left"),
          [sty.rootlabel_right]: hasVariant($state, "label", "right"),
          [sty.rootlabel_top]: hasVariant($state, "label", "top"),
          [sty.rootshape_square]: hasVariant($state, "shape", "square")
        }
      )}
    >
      <div
        data-plasmic-name={"primaryNumberStack"}
        data-plasmic-override={overrides.primaryNumberStack}
        className={classNames(projectcss.all, sty.primaryNumberStack, {
          [sty.primaryNumberStacklabel_left]: hasVariant(
            $state,
            "label",
            "left"
          ),
          [sty.primaryNumberStacklabel_right]: hasVariant(
            $state,
            "label",
            "right"
          ),
          [sty.primaryNumberStacklineWrap]: hasVariant(
            $state,
            "lineWrap",
            "lineWrap"
          ),
          [sty.primaryNumberStacksecondaryStat]: hasVariant(
            $state,
            "secondaryStat",
            "secondaryStat"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7K5T0
              )}
            >
              {"1774"}
            </div>
          ),
          value: args.primaryNumber,
          className: classNames(sty.slotTargetPrimaryNumber, {
            [sty.slotTargetPrimaryNumberlabel_top]: hasVariant(
              $state,
              "label",
              "top"
            ),
            [sty.slotTargetPrimaryNumberlineWrap]: hasVariant(
              $state,
              "lineWrap",
              "lineWrap"
            )
          })
        })}
      </div>
      <div
        data-plasmic-name={"secondaryNumberStack"}
        data-plasmic-override={overrides.secondaryNumberStack}
        className={classNames(projectcss.all, sty.secondaryNumberStack, {
          [sty.secondaryNumberStacklabel_left]: hasVariant(
            $state,
            "label",
            "left"
          ),
          [sty.secondaryNumberStacklabel_right]: hasVariant(
            $state,
            "label",
            "right"
          ),
          [sty.secondaryNumberStacklineWrap]: hasVariant(
            $state,
            "lineWrap",
            "lineWrap"
          ),
          [sty.secondaryNumberStacknoLabel]: hasVariant(
            $state,
            "noLabel",
            "noLabel"
          ),
          [sty.secondaryNumberStacksecondaryStat]: hasVariant(
            $state,
            "secondaryStat",
            "secondaryStat"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__m3FAv
              )}
            >
              {"1774"}
            </div>
          ),
          value: args.secondaryNumber,
          className: classNames(sty.slotTargetSecondaryNumber, {
            [sty.slotTargetSecondaryNumberlabel_top]: hasVariant(
              $state,
              "label",
              "top"
            ),
            [sty.slotTargetSecondaryNumberlineWrap]: hasVariant(
              $state,
              "lineWrap",
              "lineWrap"
            )
          })
        })}
      </div>
      <div
        data-plasmic-name={"labelStack"}
        data-plasmic-override={overrides.labelStack}
        className={classNames(projectcss.all, sty.labelStack, {
          [sty.labelStacklabel_left]: hasVariant($state, "label", "left"),
          [sty.labelStacklabel_right]: hasVariant($state, "label", "right"),
          [sty.labelStacknoLabel]: hasVariant($state, "noLabel", "noLabel")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sxYod
              )}
            >
              {"Active Users"}
            </div>
          ),
          value: args.statLabel,
          className: classNames(sty.slotTargetStatLabel, {
            [sty.slotTargetStatLabellineWrap]: hasVariant(
              $state,
              "lineWrap",
              "lineWrap"
            )
          })
        })}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "primaryNumberStack", "secondaryNumberStack", "labelStack"],
  primaryNumberStack: ["primaryNumberStack"],
  secondaryNumberStack: ["secondaryNumberStack"],
  labelStack: ["labelStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  primaryNumberStack: "div";
  secondaryNumberStack: "div";
  labelStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStatistic__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStatistic__VariantsArgs;
    args?: PlasmicStatistic__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStatistic__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStatistic__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStatistic__ArgProps,
          internalVariantPropNames: PlasmicStatistic__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStatistic__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStatistic";
  } else {
    func.displayName = `PlasmicStatistic.${nodeName}`;
  }
  return func;
}

export const PlasmicStatistic = Object.assign(
  // Top-level PlasmicStatistic renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    primaryNumberStack: makeNodeComponent("primaryNumberStack"),
    secondaryNumberStack: makeNodeComponent("secondaryNumberStack"),
    labelStack: makeNodeComponent("labelStack"),

    // Metadata about props expected for PlasmicStatistic
    internalVariantProps: PlasmicStatistic__VariantProps,
    internalArgProps: PlasmicStatistic__ArgProps
  }
);

export default PlasmicStatistic;
/* prettier-ignore-end */

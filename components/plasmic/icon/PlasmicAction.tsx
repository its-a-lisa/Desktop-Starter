// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nVTL6BvP7Knk1RSNkBbJCm
// Component: 2myJ88m4oGUB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import sty from "./PlasmicAction.module.css"; // plasmic-import: 2myJ88m4oGUB/css

import FaStarSolidsvgIcon from "./icons/PlasmicIcon__FaStarSolidsvg"; // plasmic-import: AryIHXd_TIRF/icon
import FaExpandsvgIcon from "./icons/PlasmicIcon__FaExpandsvg"; // plasmic-import: q9GoLH3R9G15/icon
import FaPencilAltsvgIcon from "./icons/PlasmicIcon__FaPencilAltsvg"; // plasmic-import: hFVluwV25wZJ/icon
import PfIconSavesvgIcon from "./icons/PlasmicIcon__PfIconSavesvg"; // plasmic-import: vz7Hh9XIGz3N/icon
import FaTimessvgIcon from "./icons/PlasmicIcon__FaTimessvg"; // plasmic-import: lyrwhGb6_6s8/icon
import FaMinussvgIcon from "./icons/PlasmicIcon__FaMinussvg"; // plasmic-import: Z-C9oYi3JF4t/icon
import PeArrowLeftsvgIcon from "./icons/PlasmicIcon__PeArrowLeftsvg"; // plasmic-import: dGGJK1SZU_8q/icon

createPlasmicElementProxy;

export type PlasmicAction__VariantMembers = {
  size: "xxs" | "xs" | "sm" | "md" | "lg" | "xl" | "xxl";
  disabled: "disabled";
  boldColor:
    | "basic"
    | "themePrimary"
    | "themeSecondary"
    | "themeStandard"
    | "success"
    | "information"
    | "warning"
    | "error";
  subtleColor:
    | "basic"
    | "themePrimary"
    | "themeSecondary"
    | "themeStandard"
    | "success"
    | "information"
    | "warning"
    | "error";
  action: "view" | "edit" | "save" | "close" | "collapse" | "back";
};
export type PlasmicAction__VariantsArgs = {
  size?: SingleChoiceArg<"xxs" | "xs" | "sm" | "md" | "lg" | "xl" | "xxl">;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  boldColor?: SingleChoiceArg<
    | "basic"
    | "themePrimary"
    | "themeSecondary"
    | "themeStandard"
    | "success"
    | "information"
    | "warning"
    | "error"
  >;
  subtleColor?: SingleChoiceArg<
    | "basic"
    | "themePrimary"
    | "themeSecondary"
    | "themeStandard"
    | "success"
    | "information"
    | "warning"
    | "error"
  >;
  action?: SingleChoiceArg<
    "view" | "edit" | "save" | "close" | "collapse" | "back"
  >;
};
type VariantPropType = keyof PlasmicAction__VariantsArgs;
export const PlasmicAction__VariantProps = new Array<VariantPropType>(
  "size",
  "disabled",
  "boldColor",
  "subtleColor",
  "action"
);

export type PlasmicAction__ArgsType = {};
type ArgPropType = keyof PlasmicAction__ArgsType;
export const PlasmicAction__ArgProps = new Array<ArgPropType>();

export type PlasmicAction__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultActionProps {
  size?: SingleChoiceArg<"xxs" | "xs" | "sm" | "md" | "lg" | "xl" | "xxl">;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  boldColor?: SingleChoiceArg<
    | "basic"
    | "themePrimary"
    | "themeSecondary"
    | "themeStandard"
    | "success"
    | "information"
    | "warning"
    | "error"
  >;
  subtleColor?: SingleChoiceArg<
    | "basic"
    | "themePrimary"
    | "themeSecondary"
    | "themeStandard"
    | "success"
    | "information"
    | "warning"
    | "error"
  >;
  action?: SingleChoiceArg<
    "view" | "edit" | "save" | "close" | "collapse" | "back"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAction__RenderFunc(props: {
  variants: PlasmicAction__VariantsArgs;
  args: PlasmicAction__ArgsType;
  overrides: PlasmicAction__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "disabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.disabled
      },
      {
        path: "boldColor",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.boldColor
      },
      {
        path: "subtleColor",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.subtleColor
      },
      {
        path: "action",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.action
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_core_css.global_mode_darkGrayscale]: hasVariant(
            globalVariants,
            "mode",
            "darkGrayscale"
          ),
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [plasmic_core_css.global_mode_grayscale]: hasVariant(
            globalVariants,
            "mode",
            "grayscale"
          ),
          [sty.rootaction_view]: hasVariant($state, "action", "view"),
          [sty.rootboldColor_success]: hasVariant(
            $state,
            "boldColor",
            "success"
          ),
          [sty.rootboldColor_themePrimary]: hasVariant(
            $state,
            "boldColor",
            "themePrimary"
          ),
          [sty.rootsize_sm]: hasVariant($state, "size", "sm"),
          [sty.rootsize_xs]: hasVariant($state, "size", "xs"),
          [sty.rootsize_xxs]: hasVariant($state, "size", "xxs"),
          [sty.rootsubtleColor_warning]: hasVariant(
            $state,
            "subtleColor",
            "warning"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxboldColor_basic]: hasVariant(
            $state,
            "boldColor",
            "basic"
          ),
          [sty.freeBoxboldColor_themePrimary]: hasVariant(
            $state,
            "boldColor",
            "themePrimary"
          ),
          [sty.freeBoxdisabled]: hasVariant($state, "disabled", "disabled"),
          [sty.freeBoxsize_lg]: hasVariant($state, "size", "lg"),
          [sty.freeBoxsize_md]: hasVariant($state, "size", "md"),
          [sty.freeBoxsize_sm]: hasVariant($state, "size", "sm"),
          [sty.freeBoxsize_xl]: hasVariant($state, "size", "xl"),
          [sty.freeBoxsize_xs]: hasVariant($state, "size", "xs"),
          [sty.freeBoxsize_xxl]: hasVariant($state, "size", "xxl"),
          [sty.freeBoxsize_xxs]: hasVariant($state, "size", "xxs"),
          [sty.freeBoxsubtleColor_success]: hasVariant(
            $state,
            "subtleColor",
            "success"
          )
        })}
      >
        <PlasmicIcon__
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          PlasmicIconType={
            hasVariant($state, "action", "back")
              ? PeArrowLeftsvgIcon
              : hasVariant($state, "action", "collapse")
              ? FaMinussvgIcon
              : hasVariant($state, "action", "close")
              ? FaTimessvgIcon
              : hasVariant($state, "action", "save")
              ? PfIconSavesvgIcon
              : hasVariant($state, "action", "edit")
              ? FaPencilAltsvgIcon
              : hasVariant($state, "action", "view")
              ? FaExpandsvgIcon
              : FaStarSolidsvgIcon
          }
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgaction_back]: hasVariant($state, "action", "back"),
            [sty.svgaction_close]: hasVariant($state, "action", "close"),
            [sty.svgaction_collapse]: hasVariant($state, "action", "collapse"),
            [sty.svgaction_edit]: hasVariant($state, "action", "edit"),
            [sty.svgaction_save]: hasVariant($state, "action", "save"),
            [sty.svgaction_view]: hasVariant($state, "action", "view"),
            [sty.svgboldColor_error]: hasVariant($state, "boldColor", "error"),
            [sty.svgboldColor_information]: hasVariant(
              $state,
              "boldColor",
              "information"
            ),
            [sty.svgboldColor_success]: hasVariant(
              $state,
              "boldColor",
              "success"
            ),
            [sty.svgboldColor_themePrimary]: hasVariant(
              $state,
              "boldColor",
              "themePrimary"
            ),
            [sty.svgboldColor_themeSecondary]: hasVariant(
              $state,
              "boldColor",
              "themeSecondary"
            ),
            [sty.svgboldColor_themeStandard]: hasVariant(
              $state,
              "boldColor",
              "themeStandard"
            ),
            [sty.svgboldColor_warning]: hasVariant(
              $state,
              "boldColor",
              "warning"
            ),
            [sty.svgsubtleColor_basic]: hasVariant(
              $state,
              "subtleColor",
              "basic"
            ),
            [sty.svgsubtleColor_error]: hasVariant(
              $state,
              "subtleColor",
              "error"
            ),
            [sty.svgsubtleColor_information]: hasVariant(
              $state,
              "subtleColor",
              "information"
            ),
            [sty.svgsubtleColor_success]: hasVariant(
              $state,
              "subtleColor",
              "success"
            ),
            [sty.svgsubtleColor_themePrimary]: hasVariant(
              $state,
              "subtleColor",
              "themePrimary"
            ),
            [sty.svgsubtleColor_themeSecondary]: hasVariant(
              $state,
              "subtleColor",
              "themeSecondary"
            ),
            [sty.svgsubtleColor_themeStandard]: hasVariant(
              $state,
              "subtleColor",
              "themeStandard"
            ),
            [sty.svgsubtleColor_warning]: hasVariant(
              $state,
              "subtleColor",
              "warning"
            )
          })}
          role={"img"}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "svg"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAction__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAction__VariantsArgs;
    args?: PlasmicAction__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAction__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAction__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAction__ArgProps,
          internalVariantPropNames: PlasmicAction__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAction__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAction";
  } else {
    func.displayName = `PlasmicAction.${nodeName}`;
  }
  return func;
}

export const PlasmicAction = Object.assign(
  // Top-level PlasmicAction renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicAction
    internalVariantProps: PlasmicAction__VariantProps,
    internalArgProps: PlasmicAction__ArgProps
  }
);

export default PlasmicAction;
/* prettier-ignore-end */

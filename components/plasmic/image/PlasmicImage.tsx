// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: d4FLWyib3U2TEbmJ38D5i3
// Component: p-kJ8jBM6L2n

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: d4FLWyib3U2TEbmJ38D5i3/projectcss
import sty from "./PlasmicImage.module.css"; // plasmic-import: p-kJ8jBM6L2n/css

createPlasmicElementProxy;

export type PlasmicImage__VariantMembers = {
  padding: "padding";
  width:
    | "w100"
    | "w99"
    | "w97"
    | "w95"
    | "w90"
    | "w83"
    | "w75"
    | "w66"
    | "w50"
    | "w33"
    | "w25"
    | "w13"
    | "w10"
    | "w5"
    | "w3"
    | "w1"
    | "hug"
    | "stretch";
  height:
    | "h100"
    | "h99"
    | "h97"
    | "h95"
    | "h90"
    | "h83"
    | "h75"
    | "h66"
    | "h50"
    | "h33"
    | "h25"
    | "h13"
    | "h10"
    | "h5"
    | "h3"
    | "h1"
    | "hug"
    | "stretch";
  radii: "circle" | "lg" | "md" | "sm" | "xl";
};
export type PlasmicImage__VariantsArgs = {
  padding?: SingleBooleanChoiceArg<"padding">;
  width?: SingleChoiceArg<
    | "w100"
    | "w99"
    | "w97"
    | "w95"
    | "w90"
    | "w83"
    | "w75"
    | "w66"
    | "w50"
    | "w33"
    | "w25"
    | "w13"
    | "w10"
    | "w5"
    | "w3"
    | "w1"
    | "hug"
    | "stretch"
  >;
  height?: SingleChoiceArg<
    | "h100"
    | "h99"
    | "h97"
    | "h95"
    | "h90"
    | "h83"
    | "h75"
    | "h66"
    | "h50"
    | "h33"
    | "h25"
    | "h13"
    | "h10"
    | "h5"
    | "h3"
    | "h1"
    | "hug"
    | "stretch"
  >;
  radii?: SingleChoiceArg<"circle" | "lg" | "md" | "sm" | "xl">;
};
type VariantPropType = keyof PlasmicImage__VariantsArgs;
export const PlasmicImage__VariantProps = new Array<VariantPropType>(
  "padding",
  "width",
  "height",
  "radii"
);

export type PlasmicImage__ArgsType = {
  imageUrl?: string;
};
type ArgPropType = keyof PlasmicImage__ArgsType;
export const PlasmicImage__ArgProps = new Array<ArgPropType>("imageUrl");

export type PlasmicImage__OverridesType = {
  imageBase?: Flex__<"div">;
  imageStack?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultImageProps {
  imageUrl?: string;
  padding?: SingleBooleanChoiceArg<"padding">;
  width?: SingleChoiceArg<
    | "w100"
    | "w99"
    | "w97"
    | "w95"
    | "w90"
    | "w83"
    | "w75"
    | "w66"
    | "w50"
    | "w33"
    | "w25"
    | "w13"
    | "w10"
    | "w5"
    | "w3"
    | "w1"
    | "hug"
    | "stretch"
  >;
  height?: SingleChoiceArg<
    | "h100"
    | "h99"
    | "h97"
    | "h95"
    | "h90"
    | "h83"
    | "h75"
    | "h66"
    | "h50"
    | "h33"
    | "h25"
    | "h13"
    | "h10"
    | "h5"
    | "h3"
    | "h1"
    | "hug"
    | "stretch"
  >;
  radii?: SingleChoiceArg<"circle" | "lg" | "md" | "sm" | "xl">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicImage__RenderFunc(props: {
  variants: PlasmicImage__VariantsArgs;
  args: PlasmicImage__ArgsType;
  overrides: PlasmicImage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "padding",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.padding
      },
      {
        path: "width",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.width
      },
      {
        path: "height",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.height
      },
      {
        path: "radii",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.radii
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"imageBase"}
      data-plasmic-override={overrides.imageBase}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        sty.imageBase,
        {
          [sty.imageBaseheight_h100]: hasVariant($state, "height", "h100"),
          [sty.imageBaseheight_h10]: hasVariant($state, "height", "h10"),
          [sty.imageBaseheight_h13]: hasVariant($state, "height", "h13"),
          [sty.imageBaseheight_h1]: hasVariant($state, "height", "h1"),
          [sty.imageBaseheight_h25]: hasVariant($state, "height", "h25"),
          [sty.imageBaseheight_h33]: hasVariant($state, "height", "h33"),
          [sty.imageBaseheight_h3]: hasVariant($state, "height", "h3"),
          [sty.imageBaseheight_h50]: hasVariant($state, "height", "h50"),
          [sty.imageBaseheight_h5]: hasVariant($state, "height", "h5"),
          [sty.imageBaseheight_h66]: hasVariant($state, "height", "h66"),
          [sty.imageBaseheight_h75]: hasVariant($state, "height", "h75"),
          [sty.imageBaseheight_h83]: hasVariant($state, "height", "h83"),
          [sty.imageBaseheight_h90]: hasVariant($state, "height", "h90"),
          [sty.imageBaseheight_h95]: hasVariant($state, "height", "h95"),
          [sty.imageBaseheight_h97]: hasVariant($state, "height", "h97"),
          [sty.imageBaseheight_h99]: hasVariant($state, "height", "h99"),
          [sty.imageBaseheight_hug]: hasVariant($state, "height", "hug"),
          [sty.imageBaseheight_stretch]: hasVariant(
            $state,
            "height",
            "stretch"
          ),
          [sty.imageBasepadding]: hasVariant($state, "padding", "padding"),
          [sty.imageBaseradii_circle]: hasVariant($state, "radii", "circle"),
          [sty.imageBaseradii_lg]: hasVariant($state, "radii", "lg"),
          [sty.imageBaseradii_md]: hasVariant($state, "radii", "md"),
          [sty.imageBaseradii_sm]: hasVariant($state, "radii", "sm"),
          [sty.imageBasewidth_hug]: hasVariant($state, "width", "hug"),
          [sty.imageBasewidth_stretch]: hasVariant($state, "width", "stretch"),
          [sty.imageBasewidth_w100]: hasVariant($state, "width", "w100"),
          [sty.imageBasewidth_w10]: hasVariant($state, "width", "w10"),
          [sty.imageBasewidth_w13]: hasVariant($state, "width", "w13"),
          [sty.imageBasewidth_w1]: hasVariant($state, "width", "w1"),
          [sty.imageBasewidth_w25]: hasVariant($state, "width", "w25"),
          [sty.imageBasewidth_w33]: hasVariant($state, "width", "w33"),
          [sty.imageBasewidth_w3]: hasVariant($state, "width", "w3"),
          [sty.imageBasewidth_w50]: hasVariant($state, "width", "w50"),
          [sty.imageBasewidth_w5]: hasVariant($state, "width", "w5"),
          [sty.imageBasewidth_w66]: hasVariant($state, "width", "w66"),
          [sty.imageBasewidth_w75]: hasVariant($state, "width", "w75"),
          [sty.imageBasewidth_w83]: hasVariant($state, "width", "w83"),
          [sty.imageBasewidth_w90]: hasVariant($state, "width", "w90"),
          [sty.imageBasewidth_w95]: hasVariant($state, "width", "w95"),
          [sty.imageBasewidth_w97]: hasVariant($state, "width", "w97"),
          [sty.imageBasewidth_w99]: hasVariant($state, "width", "w99")
        }
      )}
    >
      <div
        data-plasmic-name={"imageStack"}
        data-plasmic-override={overrides.imageStack}
        className={classNames(projectcss.all, sty.imageStack, {
          [sty.imageStackradii_circle]: hasVariant($state, "radii", "circle"),
          [sty.imageStackradii_lg]: hasVariant($state, "radii", "lg"),
          [sty.imageStackradii_md]: hasVariant($state, "radii", "md"),
          [sty.imageStackradii_sm]: hasVariant($state, "radii", "sm")
        })}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgradii_circle]: hasVariant($state, "radii", "circle"),
            [sty.imgradii_lg]: hasVariant($state, "radii", "lg"),
            [sty.imgradii_md]: hasVariant($state, "radii", "md"),
            [sty.imgradii_sm]: hasVariant($state, "radii", "sm")
          })}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={(() => {
            try {
              return $props.imageUrl;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  imageBase: ["imageBase", "imageStack", "img"],
  imageStack: ["imageStack", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  imageBase: "div";
  imageStack: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicImage__VariantsArgs;
    args?: PlasmicImage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicImage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicImage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicImage__ArgProps,
          internalVariantPropNames: PlasmicImage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicImage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "imageBase") {
    func.displayName = "PlasmicImage";
  } else {
    func.displayName = `PlasmicImage.${nodeName}`;
  }
  return func;
}

export const PlasmicImage = Object.assign(
  // Top-level PlasmicImage renders the root element
  makeNodeComponent("imageBase"),
  {
    // Helper components rendering sub-elements
    imageStack: makeNodeComponent("imageStack"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicImage
    internalVariantProps: PlasmicImage__VariantProps,
    internalArgProps: PlasmicImage__ArgProps
  }
);

export default PlasmicImage;
/* prettier-ignore-end */
